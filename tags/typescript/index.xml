<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript on Code-Chimp</title><link>https://code-chimp.com/tags/typescript/</link><description>Recent content in TypeScript on Code-Chimp</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tim@code-chimp.com (Tim Goshinski)</managingEditor><webMaster>tim@code-chimp.com (Tim Goshinski)</webMaster><copyright>Â© 2024 Tim Goshinski</copyright><lastBuildDate>Sat, 22 Oct 2022 00:01:01 -0500</lastBuildDate><atom:link href="https://code-chimp.com/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Redux Powered Notification Pipeline Pt. 2: Toasts</title><link>https://code-chimp.com/posts/rx-notification-pipeline-2/</link><pubDate>Sat, 22 Oct 2022 00:01:01 -0500</pubDate><author>tim@code-chimp.com (Tim Goshinski)</author><guid>https://code-chimp.com/posts/rx-notification-pipeline-2/</guid><description>&lt;p>&lt;a href="https://getbootstrap.com/docs/5.2/components/alerts/"title="Provide contextual feedback messages for typical user actions" target="_blank">Alerts&lt;/a> tend to be for &lt;strong>sticky&lt;/strong> messages that I want to ensure the user must actively engage and dismiss.
&lt;a href="https://getbootstrap.com/docs/5.2/components/toasts/"title="Lightweight push notifications" target="_blank">Toasts&lt;/a>, on the other hand, are used for quick, &lt;strong>&lt;em>something-happened&lt;/em>&lt;/strong> style messages - the information is there
for the user to pay attention to, or not, as the message will disappear on its own in a few seconds.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://code-chimp.com/posts/rx-notification-pipeline-2/featured.png"/></item><item><title>Redux Powered Notification Pipeline Pt. 1: Alerts</title><link>https://code-chimp.com/posts/rx-notification-pipeline-1/</link><pubDate>Wed, 19 Oct 2022 00:01:01 -0500</pubDate><author>tim@code-chimp.com (Tim Goshinski)</author><guid>https://code-chimp.com/posts/rx-notification-pipeline-1/</guid><description>&lt;p>Timely and relevant feedback from application events is critical to maintaining user engagement. Two standard ways of
delivering immediate event feedback are through the use of &lt;a href="https://getbootstrap.com/docs/5.2/components/alerts/"title="Provide contextual feedback messages for typical user actions" target="_blank">alerts&lt;/a> and &lt;a href="https://getbootstrap.com/docs/5.2/components/toasts/"title="Lightweight push notifications" target="_blank">toast messages&lt;/a>. To avoid a lot of
boilerplate markup popping up all over the project I wanted to make it as simple as just dispatching an action such as
&amp;ldquo;&lt;code>dispatch(errorAlert('your call cannot be completed as dialed');&lt;/code>&amp;rdquo; and have the alert appear on the screen. I am using
&lt;a href="https://getbootstrap.com/"title="Powerful front-end toolkit" target="_blank">Bootstrap&lt;/a> for this project but the same concept should translate to other frameworks such as &lt;a href="https://ant.design/docs/react/introduce"title="Popular UI toolkit" target="_blank">Ant Design&lt;/a>,
&lt;a href="https://mui.com/"title="A comprehensive suite of UI tools to help you ship new features faster" target="_blank">Material UI&lt;/a>, or &lt;a href="https://get.foundation/sites.html"title="A wide range of modular and flexible components with an eye toward accessibility" target="_blank">Foundation for Sites&lt;/a>.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://code-chimp.com/posts/rx-notification-pipeline-1/featured.png"/></item><item><title>Switching to Fetch API</title><link>https://code-chimp.com/posts/switching-to-fetch-api/</link><pubDate>Sun, 16 Oct 2022 19:58:57 -0500</pubDate><author>tim@code-chimp.com (Tim Goshinski)</author><guid>https://code-chimp.com/posts/switching-to-fetch-api/</guid><description>&lt;p>I have finally made the decision to let go of one of my favorite NPM packages, &lt;a href="https://axios-http.com/"title="Promise based HTTP client for the browser and node.js" target="_blank">Axios&lt;/a>, in favor of modern browsers'
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"title="The Fetch API provides an interface for fetching resources" target="_blank">Fetch API&lt;/a>. I want to be clear up front - &lt;strong>I find nothing wrong with Axios&lt;/strong>, it is an extremely high quality
package and a natural progression having used &lt;a href="https://angular.io/"title="Modern web developer&amp;#39;s platform" target="_blank">Angular&lt;/a>&amp;rsquo;s http service that it was originally based upon. I will
likely still rely on Axios in &lt;a href="https://nodejs.org/en/"title="Open-source, cross-platform JavaScript runtime environment" target="_blank">NodeJS&lt;/a> projects, but times change and it now seems a bit redundant in front-end
client applications.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://code-chimp.com/posts/switching-to-fetch-api/featured.png"/></item><item><title>TypeScript: Organization with `@` Directories</title><link>https://code-chimp.com/posts/organization-with-ts-at-directories/</link><pubDate>Mon, 10 Oct 2022 12:07:06 -0500</pubDate><author>tim@code-chimp.com (Tim Goshinski)</author><guid>https://code-chimp.com/posts/organization-with-ts-at-directories/</guid><description>A set of specialty folders I utilize in TypeScript projects to better organize language specific concepts.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://code-chimp.com/posts/organization-with-ts-at-directories/featured.png"/></item></channel></rss>