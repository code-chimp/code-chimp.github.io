[{"content":"","date":"7 October 2022","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"7 October 2022","permalink":"/","section":"Code-Chimp","summary":"","title":"Code-Chimp"},{"content":"","date":"7 October 2022","permalink":"/tags/configuration/","section":"Tags","summary":"","title":"configuration"},{"content":"","date":"7 October 2022","permalink":"/categories/development/","section":"Categories","summary":"","title":"Development"},{"content":"","date":"7 October 2022","permalink":"/tags/nodejs/","section":"Tags","summary":"","title":"NodeJS"},{"content":"","date":"7 October 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"7 October 2022","permalink":"/categories/project-architecture/","section":"Categories","summary":"","title":"Project Architecture"},{"content":"I have a small pet peeve, maybe it\u0026rsquo;s just me, but I really dislike random chunks of configuration cluttering up my package.json file. Project generators offered by the likes of Nest and Create React App still leverage the classic pattern of embedding third party configuration values in the package.json, which makes it feel cluttered to me. Really I am just looking to see the dependencies, development dependencies, NPM scripts, and basic project metadata in that file.\nTo illustrate I have just spun up a fresh React project with Create React App and found a configuration section for ESLint and one for Browserslist:\n{ \u0026#34;name\u0026#34;: \u0026#34;whats-new\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;react-scripts test\u0026#34;, \u0026#34;eject\u0026#34;: \u0026#34;react-scripts eject\u0026#34; }, \u0026#34;eslintConfig\u0026#34;: { \u0026#34;extends\u0026#34;: [ \u0026#34;react-app\u0026#34;, \u0026#34;react-app/jest\u0026#34; ] }, \u0026#34;browserslist\u0026#34;: { \u0026#34;production\u0026#34;: [ \u0026#34;\u0026gt;0.2%\u0026#34;, \u0026#34;not dead\u0026#34;, \u0026#34;not op_mini all\u0026#34; ], \u0026#34;development\u0026#34;: [ \u0026#34;last 1 chrome version\u0026#34;, \u0026#34;last 1 firefox version\u0026#34;, \u0026#34;last 1 safari version\u0026#34; ] }, \u0026#34;dependencies\u0026#34;: { \u0026#34;@testing-library/jest-dom\u0026#34;: \u0026#34;^5.14.1\u0026#34;, \u0026#34;@testing-library/react\u0026#34;: \u0026#34;^13.0.0\u0026#34;, \u0026#34;@testing-library/user-event\u0026#34;: \u0026#34;^13.2.1\u0026#34;, \u0026#34;@types/jest\u0026#34;: \u0026#34;^27.0.1\u0026#34;, \u0026#34;@types/node\u0026#34;: \u0026#34;^16.7.13\u0026#34;, \u0026#34;@types/react\u0026#34;: \u0026#34;^18.0.0\u0026#34;, \u0026#34;@types/react-dom\u0026#34;: \u0026#34;^18.0.0\u0026#34;, \u0026#34;react\u0026#34;: \u0026#34;^18.2.0\u0026#34;, \u0026#34;react-dom\u0026#34;: \u0026#34;^18.2.0\u0026#34;, \u0026#34;react-scripts\u0026#34;: \u0026#34;5.0.1\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;^4.4.2\u0026#34;, \u0026#34;web-vitals\u0026#34;: \u0026#34;^2.1.0\u0026#34; } } Most are aware by now that the ESLint configuration can be split out into its own configuration file like so:\n.eslintrc.json { \u0026#34;extends\u0026#34;: [ \u0026#34;react-app\u0026#34;, \u0026#34;react-app/jest\u0026#34; ] }\nwhich, to be fair, does not look like it buys you much. However this is completely barebones before you decided to wire in your testing framework, ensure accessibility, define project coding standards, etc.\nAll of the new config values in this .eslintrc.json would have been a lot of excess content weighing the package.json down distracting from the content you are actually looking to see there. { \u0026#34;root\u0026#34;: true, \u0026#34;parser\u0026#34;: \u0026#34;@typescript-eslint/parser\u0026#34;, \u0026#34;parserOptions\u0026#34;: { \u0026#34;ecmaVersion\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;sourceType\u0026#34;: \u0026#34;module\u0026#34; }, \u0026#34;env\u0026#34;: { \u0026#34;browser\u0026#34;: true, \u0026#34;es2021\u0026#34;: true, \u0026#34;jest/globals\u0026#34;: true, \u0026#34;node\u0026#34;: true }, \u0026#34;extends\u0026#34;: [ \u0026#34;eslint:recommended\u0026#34;, \u0026#34;plugin:@typescript-eslint/eslint-recommended\u0026#34;, \u0026#34;plugin:@typescript-eslint/recommended\u0026#34;, \u0026#34;plugin:prettier/recommended\u0026#34;, \u0026#34;plugin:react/recommended\u0026#34;, \u0026#34;plugin:jest/recommended\u0026#34;, \u0026#34;plugin:jsx-a11y/recommended\u0026#34; ], \u0026#34;overrides\u0026#34;: [ { \u0026#34;files\u0026#34;: [\u0026#34;*.ts\u0026#34;, \u0026#34;*.tsx\u0026#34;], \u0026#34;rules\u0026#34;: { \u0026#34;@typescript-eslint/no-unused-vars\u0026#34;: [2, { \u0026#34;args\u0026#34;: \u0026#34;none\u0026#34; }] } } ], \u0026#34;plugins\u0026#34;: [\u0026#34;@typescript-eslint\u0026#34;, \u0026#34;react\u0026#34;, \u0026#34;react-hooks\u0026#34;, \u0026#34;jest\u0026#34;, \u0026#34;jsx-a11y\u0026#34;], \u0026#34;rules\u0026#34;: { \u0026#34;react/self-closing-comp\u0026#34;: [ \u0026#34;error\u0026#34;, { \u0026#34;component\u0026#34;: true, \u0026#34;html\u0026#34;: true } ], \u0026#34;react/no-array-index-key\u0026#34;: 2, \u0026#34;react/no-danger\u0026#34;: 1, \u0026#34;react/no-deprecated\u0026#34;: 2, \u0026#34;react/no-did-mount-set-state\u0026#34;: 1, \u0026#34;react/no-did-update-set-state\u0026#34;: 1, \u0026#34;react/no-direct-mutation-state\u0026#34;: 2, \u0026#34;react/no-find-dom-node\u0026#34;: 1, \u0026#34;react/no-is-mounted\u0026#34;: 1, \u0026#34;react/no-multi-comp\u0026#34;: 2, \u0026#34;react/no-redundant-should-component-update\u0026#34;: 2, \u0026#34;react/no-render-return-value\u0026#34;: 2, \u0026#34;react/no-typos\u0026#34;: 1, \u0026#34;react/react-in-jsx-scope\u0026#34;: 1, \u0026#34;react/jsx-handler-names\u0026#34;: \u0026#34;off\u0026#34;, \u0026#34;react/jsx-no-duplicate-props\u0026#34;: 2, \u0026#34;react/jsx-fragments\u0026#34;: 2, \u0026#34;react/jsx-pascal-case\u0026#34;: 2, \u0026#34;react/jsx-boolean-value\u0026#34;: 2, \u0026#34;no-unused-vars\u0026#34;: [2, { \u0026#34;vars\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;args\u0026#34;: \u0026#34;after-used\u0026#34;, \u0026#34;argsIgnorePattern\u0026#34;: \u0026#34;_\u0026#34; }], \u0026#34;no-magic-numbers\u0026#34;: [2, { \u0026#34;ignore\u0026#34;: [-1, 0, 1, 2, 10, 100, 3000, 3001] }], \u0026#34;react-hooks/exhaustive-deps\u0026#34;: \u0026#34;warn\u0026#34;, \u0026#34;react-hooks/rules-of-hooks\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;no-prototype-builtins\u0026#34;: \u0026#34;off\u0026#34;, \u0026#34;no-console\u0026#34;: [ \u0026#34;error\u0026#34;, { \u0026#34;allow\u0026#34;: [\u0026#34;error\u0026#34;, \u0026#34;info\u0026#34;, \u0026#34;warn\u0026#34;] } ] }, \u0026#34;settings\u0026#34;: { \u0026#34;react\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;detect\u0026#34; } } }\nIf you were not aware the Browserslist settings can also be broken out into a separate file\n.browserslistrc [production] \u0026gt; 0.25% not dead not op_mini all [development] last 1 chrome version last 1 firefox version last 1 safari version\nLikewise Nest tends to put Jest configuration in the package.json while it can just as easily go into its own JavaScript file:\njest.config.js module.exports = { testRegex: \u0026#39;.*\\\\.test\\\\.tsx?$\u0026#39;, transform: { \u0026#39;^.+\\\\.(t|j)sx?$\u0026#39;: \u0026#39;ts-jest\u0026#39;, }, setupFilesAfterEnv: [\u0026#39;./setupTests.ts\u0026#39;], collectCoverage: true, collectCoverageFrom: [ \u0026#39;**/*.{js,ts,tsx}\u0026#39;, \u0026#39;!src/api/**\u0026#39;, \u0026#39;!coverage/**\u0026#39;, \u0026#39;!data-scripts/**\u0026#39;, \u0026#39;!node_modules/**\u0026#39;, \u0026#39;!**/@enums/**\u0026#39;, \u0026#39;!**/@interfaces/**\u0026#39;, \u0026#39;!**/@mocks/**\u0026#39;, \u0026#39;!**/@types/**\u0026#39;, \u0026#39;!**/**/index.ts\u0026#39;, \u0026#39;!**/**.d.ts\u0026#39;, \u0026#39;!src/client/index.tsx\u0026#39;, \u0026#39;!src/client/services/**\u0026#39;, \u0026#39;!scripts/average-work.ts\u0026#39;, \u0026#39;!jest.config.js\u0026#39;, \u0026#39;!setupTests.ts\u0026#39;, ], coverageThreshold: { global: { branches: 85, functions: 95, statements: 85, }, }, };\nFor me personally the expense of a few extra files in my project root to keep every more focused on its specific purpose is worth it.\na fairly average project root ","date":"7 October 2022","permalink":"/posts/psa-clean-up-package-json/","section":"Posts","summary":"I have a small pet peeve, maybe it\u0026rsquo;s just me, but I really dislike random chunks of configuration cluttering up my package.json file. Project generators offered by the likes of Nest and Create React App still leverage the classic pattern of embedding third party configuration values in the package.","title":"PSA: Cleaning Up package.json"},{"content":"","date":"7 October 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"Experience # Company Link Role Dates Location Helix by Q2 Staff Software Engineer 06/2021 - Present Remote Austin, TX\nUSA td\u003e Kiewit Corporation Sr. Software Engineer 05/2019 - 06/2021 Omaha, NE\nUSA Orion Software Engineer /API Developer 11/2017 - 05/2019 Omaha, NE\nUSA Medefis, Inc. Sr. Programmer 06/2016 - 11/2017 Omaha, NE\nUSA CSG International Sr. User Interface Development Engineer 09/2015 - 06/2016 Omaha, NE\nUSA idea5, Inc. Sr. Full-Stack Developer 06/2013 - 09/2015 Omaha, NE\nUSA Lineage Logistics Sr. Programmer Analyst 05/2012 - 06/2013 Omaha, NE\nUSA Streck Sr. Programmer/Analyst 07/2011 - 05/2012 La Vista, NE\nUSA iNet Solutions Group, Inc. Sr. Developer 08/2007 - 07/2011 Omaha, NE\nUSA Sitel Group Web Developer\n2006 - 2007 05/1999 - 08/2007 Omaha, NE\nUSA Programmer III2002 - 2006 Programmer II\n1999 - 2002 Special Interest # Company Link Role Dates Location Lazarus Software Technology Artisan 05/2014 - Present RemoteOmaha, NEUSA ","date":"5 October 2022","permalink":"/history/","section":"Code-Chimp","summary":"Experience # Company Link Role Dates Location Helix by Q2 Staff Software Engineer 06/2021 - Present Remote Austin, TX\nUSA td\u003e Kiewit Corporation Sr. Software Engineer 05/2019 - 06/2021 Omaha, NE","title":"History"},{"content":" What I do # I have been shipping code for well over two decades now, and I still really love my work. Currently I am working as a front-end heavy full-stack developer - being a huge fan of the React framework and having experience with the .NET ecosystem going all the way back to its release in 2002. I have entirely embraced TypeScript for React and basically anything I would normally have write in JavaScript such as a NodeJS middle tier code or even personal experiments with React Native. Lately I have been focusing on automating my code quality through the use of good static analysis tools like ESLint and Prettier paired with an extensive test suite - usually developed with Kent C. Dodd\u0026rsquo;s excellent Testing Library enhancing the Jest testing framework (example).\nHow I got here # the books in the middle opened a new world for me I was bitten by the programming bug after seeing the Disney movie Tron as a young teenager - afterwards ceaselessly bugging my parents until they gave in (a couple of years later) and purchased a top-of-the line Apple //c. That computer introduced me to the world of Apple Basic and 6502 Assembler and still sits in a corner of my office (pic).\nAfter years of developing in mainframe languages and Visual Basic 6 I finally slid into web development with the first release of ASP.NET. Fast forward a bit and I land at a startup as a \u0026ldquo;C# Cloud Developer\u0026rdquo;, but since I proved to be really handy with jQuery, HTML5 and this new-fangled thing called Sass I was tasked with being the \u0026ldquo;front-end guy\u0026rdquo;. I very quickly learned that I loved the bleeding edge of 2013 front-end development - evaluating frameworks like early AngularJS, Backbone, and Knockout tooling like the Grunt and Gulp task runners and an early bundler called Almond. The rest, as they say, is history as the frameworks, tooling, and discipline of front-end development have only grown more refined since then.\nWhere I am # I live in Omaha, NE with my wife, daughter and three very random rescue dogs. Even though I am not wild about winters here in the Midwest, I cannot seem to talk my wife into moving anywhere else so I am stuck here for the time being. In my spare time I like experimenting with different programming languages and frameworks. When my family manages to get me out of the house I enjoy walking our local botanical gardens, world class zoo, or one of our many - sometimes eclectic - museums.\nMy Apple //c # Jurassic PC in her native environment ","date":"5 October 2022","permalink":"/about/","section":"Code-Chimp","summary":"What I do # I have been shipping code for well over two decades now, and I still really love my work. Currently I am working as a front-end heavy full-stack developer - being a huge fan of the React framework and having experience with the .","title":"About"}]