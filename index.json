[{"content":"","date":"16 October 2022","permalink":"/tags/api/","section":"Tags","summary":"","title":"API"},{"content":"","date":"16 October 2022","permalink":"/tags/axios/","section":"Tags","summary":"","title":"Axios"},{"content":"","date":"16 October 2022","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"16 October 2022","permalink":"/","section":"Code-Chimp","summary":"","title":"Code-Chimp"},{"content":"","date":"16 October 2022","permalink":"/categories/development/","section":"Categories","summary":"","title":"Development"},{"content":"","date":"16 October 2022","permalink":"/tags/fetch/","section":"Tags","summary":"","title":"Fetch"},{"content":"","date":"16 October 2022","permalink":"/tags/native-api/","section":"Tags","summary":"","title":"Native API"},{"content":"","date":"16 October 2022","permalink":"/tags/optimization/","section":"Tags","summary":"","title":"Optimization"},{"content":"","date":"16 October 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"I have finally made the decision to let go of one of my favorite NPM packages, Axios , in favor of modern browsers' Fetch API . I want to be clear up front - I find nothing wrong with Axios, it is an extremely high quality package and a natural progression having used Angular \u0026rsquo;s http service that it was originally based upon. I will likely still rely on Axios in NodeJS projects, but times change and it now seems a bit redundant in front-end client applications.\nThere are really only a few factors that are prompting me to make this change:\nThere is no longer a need for me to support legacy browsers A need to get back exactly what was being sent by the server without any additional overhead No longer seeing the necessity of such a package on the client when the native browser API is more than sufficient Before # So here is a typical, albeit contrived, previous use of Axios in a front-end service on my Redux template project :\nfile: /src/services/user/UsersApi.ts import { AxiosResponse } from \u0026#39;axios\u0026#39;; import IUser from \u0026#39;../../@interfaces/IUser\u0026#39;; import { getAxiosInstance } from \u0026#39;../baseService\u0026#39;; import { unwrapServiceError } from \u0026#39;../../util/service\u0026#39;; axios.defaults.baseURL = \u0026#39;https://jsonplaceholder.typicode.com/\u0026#39;; export const fetchUsers = async (): Promise\u0026lt;Array\u0026lt;IUser\u0026gt;\u0026gt; =\u0026gt; { try { const axios = getAxiosInstance(); const response: AxiosResponse = await axios.get(\u0026#39;/users\u0026#39;); return response.data; } catch (e) { throw unwrapServiceError(\u0026#39;UsersApi.fetchUsers\u0026#39;, e); } };\nAlong with the factory method to create the Axios instance:\nfile: /src/services/baseService.ts import axios, { AxiosInstance, AxiosRequestConfig } from \u0026#39;axios\u0026#39;; import { config as appConfig } from \u0026#39;../config\u0026#39;; export const getAxiosInstance = (token?: string): AxiosInstance =\u0026gt; { const getConfig = (token?: string): AxiosRequestConfig =\u0026gt; { const config: AxiosRequestConfig = { baseURL: appConfig.apiUrl, headers: { \u0026#39;Cache-Control\u0026#39;: \u0026#39;no-cache\u0026#39;, \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, Pragma: \u0026#39;no-cache\u0026#39;, }, }; if (token) { config.headers.Authorization = `Bearer ${token}`; } return config; }; const config = getConfig(token); const instance = axios.create(config); // NOTE: Wire interceptors here. return instance; };\nAnd finally a utility I wrote to normalize Axios errors along with other types of framework errors:\nfile: /src/util/service.ts export const unwrapServiceError = (serviceMethod: string, error: any): AxiosError | Error =\u0026gt; { if (error.response) { // utilize more robust AxiosError const e = error as AxiosError; if (e.response!.status === HttpStatusCodes.BadRequest \u0026amp;\u0026amp; !e.response!.data?.message) { e.response!.data = e.response!.data || {}; e.response!.data.message = `${serviceMethod}: Not Found`; } return e; } return new Error(`${serviceMethod} error: ${error.message}`); };\nThis pattern and code nearly verbatim has served me well for many, many projects.\nThe Rewrite # My process for switching to the native Fetch API started with a visit to the MDN documentation pertaining to passing body, options, headers etc. to a fetch request. It was pretty obvious that it would not be too difficult of a process to create a helper method to do something similar to axios.create. I opted just to create the request body and explicitly pass it to fetch in the service so that it is clear that we are using the native API.\nfile: /src/helpers/service.ts import { ACCESS_ERROR, GENERIC_SERVICE_ERROR } from \u0026#39;../constants\u0026#39;; // for the demo this is in a `.env` file that Create-React-App is auto-wired to pick up const apiUri = process.env.REACT_APP_API_URI; function createRequest(method: FetchRequestType) { return (url: string, body?: any, token?: string): Request =\u0026gt; { const headers: Headers = new Headers({ \u0026#39;Cache-Control\u0026#39;: \u0026#39;no-cache\u0026#39;, Pragma: \u0026#39;no-cache\u0026#39;, }); if (body) { headers.append(\u0026#39;Content-Type\u0026#39;, \u0026#39;application/json\u0026#39;); } if (token) { headers.append(\u0026#39;Authorization\u0026#39;, `Bearer ${token}`); } const init: RequestInit = { method, mode: \u0026#39;cors\u0026#39;, cache: \u0026#39;no-cache\u0026#39;, headers, }; if (token) { init.credentials = \u0026#39;include\u0026#39;; } if (body) { init.body = JSON.stringify(body); } return new Request(`${apiUri}${url}`, init); }; }\nMaybe a little more verbose, but I opted for clarity when naming my exported helper functions:\nfile: /src/helpers/service.ts export const createGetRequest = createRequest(FetchMethods.Get); export const createPatchRequest = createRequest(FetchMethods.Patch); export const createPostRequest = createRequest(FetchMethods.Post); export const createPutRequest = createRequest(FetchMethods.Put); export const createDeleteRequest = createRequest(FetchMethods.Delete);\nSince there is a lot of repetitive boilerplate around processing a fetch response I opted for another helper method and decided that it was a good place to take advantage of TypeScript\u0026rsquo;s generics for stronger typing when processing the response\u0026rsquo;s payload. Since I have run into API\u0026rsquo;s that return compound responses, similar to an AxiosResponse with the payload coming in a data field, I check for those here so I can dig the value I am looking for seamlessly out of the payload. This is probably a good spot for fine-tuning to your specific needs.\nfile: /src/helpers/service.ts export async function processApiResponse\u0026lt;Type\u0026gt;(response: Response): Promise\u0026lt;Type\u0026gt; { if (response.ok) { const payload = await response.json(); // see if we have a compound API response if (payload.status \u0026amp;\u0026amp; (payload.data || payload.errors)) { if (!payload.success) { throw payload; } return payload.data as Type; } return payload as Type; } if ( response.status === HttpStatusCodes.Unauthorized || response.status === HttpStatusCodes.Forbidden ) { throw new Error(ACCESS_ERROR); } throw new Error(GENERIC_SERVICE_ERROR); }\nAs we are no longer dealing with a potential AxiosError body the error processor gets more than a little slimmer:\nfile: /src/helpers/service.ts export const unwrapServiceError = (serviceMethod: string, error: any): Error =\u0026gt; { return new Error( `${serviceMethod} error: ${error.errors ? error.errors[0] : error.message}` ); };\nResult # Putting it all together I feel that it makes my service functions a bit more streamlined and easier to read:\nfile: /src/services/user/UsersApi.ts import IUser from \u0026#39;../../@interfaces/IUser\u0026#39;; import { createGetRequest, processApiResponse, unwrapServiceError } from \u0026#39;../../helpers\u0026#39;; export const fetchUsers = async (): Promise\u0026lt;Array\u0026lt;IUser\u0026gt;\u0026gt; =\u0026gt; { try { const response = await fetch(createGetRequest(\u0026#39;/users\u0026#39;)); return await processApiResponse\u0026lt;Array\u0026lt;IUser\u0026gt;\u0026gt;(response); } catch (e) { throw unwrapServiceError(\u0026#39;UsersApi.fetchUsers\u0026#39;, e); } };\nAs always feel free to drop me a line if you see anything you feel could be improved. Thank you for dropping by. Reference Project ","date":"16 October 2022","permalink":"/posts/switching-to-fetch-api/","section":"Posts","summary":"I have finally made the decision to let go of one of my favorite NPM packages, Axios , in favor of modern browsers' Fetch API . I want to be clear up front - I find nothing wrong with Axios, it is an extremely high quality package and a natural progression having used Angular \u0026rsquo;s http service that it was originally based upon.","title":"Switching to Fetch API"},{"content":"","date":"16 October 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"16 October 2022","permalink":"/tags/typescript/","section":"Tags","summary":"","title":"TypeScript"},{"content":"","date":"10 October 2022","permalink":"/tags/opinion/","section":"Tags","summary":"","title":"Opinion"},{"content":"","date":"10 October 2022","permalink":"/categories/project-architecture/","section":"Categories","summary":"","title":"Project Architecture"},{"content":"TL:DR I generally have some variation of this set of folders that I add to all of my TypeScript projects:\nsrc/ ├── @enums/ \u0026lt;- project-wide Enumerations │ ├── AsyncStates.ts \u0026lt;- (described below) │ └── HttpStatusCodes.ts \u0026lt;- (described below) ├── @interfaces/ \u0026lt;- project-wide Interfaces ├── @mocks/ \u0026lt;- mocks used in local dev and tests └── @types/ \u0026lt;- project-wide Types └── AsyncStatus.ts \u0026lt;- (described below) As a longtime JavaScript developer I admit that it took me a long while to warm up to TypeScript. However, after fully embracing TypeScript the one thing that still irritated me was a seemingly growing amount of non-JavaScript related files bloating up my project folders - ie. the superset part of TypeScript: types, interfaces, and enumerations. When I am looking at a folder with more than six (6) *.ts files it is nice to know that I am looking at app logic and/or unit tests.\nI believe the first time I noticed an at folder it was something along the lines of @models in one of the company\u0026rsquo;s architects seed projects. I thought the @ prefix was a novel idea being legal in JavaScript/TypeScript and it really called out to me that this was a special folder. At the time our stable team was working on a really interface-heavy React front-end and some of the service and component folders were growing quite large with bespoke interfaces and types mixed in with the business logic and (too few) unit tests.\nOne weekend I decided to create a spike branch and move as many of the interfaces and types as I could into @types and @interfaces folders. Not only did it declutter some service and component folders I also managed to find a couple of places we had duplicates and more than one error. This pattern proved to be very popular with the team and we expanded the idea to include an @enumerations folder to house some enumerations we had created to lend meaning to some of the magic numbers and string values peppered around the project. After a few years using this pattern I have not had a team yet that disliked, or really had any problem with it.\nSome more detail and examples of my reasoning follows.\n@enums (or @enumerations) # Here we give meaning to groups of numbers or strings, say your backend had a numeric field AddressType - what does that 1 in the field really mean? By creating an AddressTypes enumeration we no longer have to remember 3 means \u0026ldquo;Business\u0026rdquo; or that 5 stands for \u0026ldquo;Cabin by the Lake\u0026rdquo;. For a real-world example this particular enumeration helps me keep a lot of magic numbers out of my React front-ends and NodeJS backends:\n@enums/HttpStatusCodes.ts /* eslint-disable no-magic-numbers */ enum HttpStatusCodes { Ok = 200, Created, Accepted, NoContent = 204, MovedPermanently = 301, Redirect = 302, BadRequest = 400, Unauthorized, Forbidden = 403, NotFound, InternalServerError = 500, NotImplemented, BadGateway, } export default HttpStatusCodes;\n@interfaces # The majority of the interface definitions I put here describe the DTO\u0026rsquo;s coming from my services. Since I come from a C# background I like to preface all of my interface names with \u0026ldquo;I\u0026rdquo;, as in IUsersResponse, IWidget, etc. - I find that it helps me differentiate interfaces at a glance from types or classes.\nexample: export default interface IUser { id: number; name: string; username: string; address: { street: string; suite: string; city: string; zipcode: string; geo: { lat: number; lng: number; }; }; phone: string; website: string; company: { name: string; catchPhrase: string; bs: string; }; }\n@types # Really just what it says, types that apply project wide. I feel the best example is a combination of an enumeration and type that I find handy when creating Redux Toolkit slices that utilize thunks:\n@types/AsyncStatus.ts import AsyncStates from \u0026#39;../@enums/AsyncStates\u0026#39;; type AsyncStatus = | AsyncStates.Idle | AsyncStates.Pending | AsyncStates.Success | AsyncStates.Fail; export default AsyncStatus;\n@enums/AsyncStates.ts enum AsyncStates { Idle = \u0026#39;IDLE\u0026#39;, Pending = \u0026#39;PENDING\u0026#39;, Success = \u0026#39;SUCCESS\u0026#39;, Fail = \u0026#39;FAIL\u0026#39;, } export default AsyncStates;\nWork together like so to better describe the intent of the values being used:\nstore/slices/user.ts import { fetchUsers } from \u0026#39;../../services/user/UsersApi\u0026#39;; // NOTE: not all interfaces end up in the global folder if they make // more sense at a granular level export interface IUserSlice { current: IUser | null; users: Array\u0026lt;IUser\u0026gt;; status: AsyncStatus; error: string | null; } export const initialState: IUserSlice = { current: null, users: [], status: AsyncStates.Idle, error: null, }; export const user = createSlice({ name: \u0026#39;user\u0026#39;, initialState, reducers: { clearCurrentUser: (state: IUserSlice) =\u0026gt; { state.current = null; }, setCurrentUser: (state: IUserSlice, action: { type: string; payload: number }) =\u0026gt; { const user = state.users.find(x =\u0026gt; x.id === action.payload); if (user) { state.current = user; state.error = null; } else { state.current = null; state.error = \u0026#39;user not found\u0026#39;; } }, }, extraReducers: builder =\u0026gt; { builder.addCase(loadUsers.pending, (state: IUserSlice) =\u0026gt; { state.status = AsyncStates.Pending; }); builder.addCase( loadUsers.fulfilled, (state: IUserSlice, { payload }: PayloadAction\u0026lt;Array\u0026lt;IUser\u0026gt; | undefined\u0026gt;) =\u0026gt; { state.status = AsyncStates.Success; state.users = payload ? (payload as Array\u0026lt;IUser\u0026gt;) : []; // or you could make it an additive operation // state.users = [...state.users, ...(action.payload as Array\u0026lt;IUser\u0026gt;)]; }, ); builder.addCase(loadUsers.rejected, (state: IUserSlice, action: any) =\u0026gt; { state.status = AsyncStates.Fail; state.error = action.payload as string; state.users = []; }); }, });\nBonus: @mocks # Since some of the response signatures from the services can be quite complex we found it convenient to collect all of our mocks in a single location to be easily reused across multiple unit tests. It is also handy for the rest of the team to not have to reinvent the wheel each time they are writing new code relating to the previously mocked values.\nAnother bonus that came out of creating these mocks is we found that it allowed us to develop service and component code in parallel with the backend. The front-end developer collaborates with the backend dev to get the proposed shape of the DTO that will come out of the API. From there it is simply a matter of defining the interface for said data and developing a mock return value in the @mocks directory. To simulate the interaction for your application you can pipe mocked values through the service code until the backend is ready for you to pull the live version. And triple-bonus you now have valid mocks for all unit tests around the service consumption.\nexample: import IBlock from \u0026#39;../@interfaces/IBlock\u0026#39;; const mockChain: Array\u0026lt;IBlock\u0026gt; = [ { timestamp: 1, lastHash: \u0026#39;-----\u0026#39;, hash: \u0026#39;=====\u0026#39;, data: [], difficulty: 3, nonce: 0, }, { timestamp: 1664912323208, lastHash: \u0026#39;=====\u0026#39;, hash: \u0026#39;12d331b40d8ef653827c9e43502c3ee73232038be01937f1cd8328fe699a85a8\u0026#39;, data: [\u0026#39;lookit\u0026#39;, \u0026#39;da\u0026#39;, \u0026#39;birdie\u0026#39;], difficulty: 2, nonce: 8, }, { timestamp: 1664912364866, lastHash: \u0026#39;12d331b40d8ef653827c9e43502c3ee73232038be01937f1cd8328fe699a85a8\u0026#39;, hash: \u0026#39;458059ca76b703b0be6d7f30b80fb44ad3b8436348032f59efcf5056930b2b38\u0026#39;, data: [\u0026#39;data\u0026#39;, \u0026#34;come\u0026#39;n\u0026#34;, \u0026#34;get\u0026#39;ur\u0026#34;, \u0026#39;data\u0026#39;], difficulty: 1, nonce: 1, }, { timestamp: 1664912386011, lastHash: \u0026#39;458059ca76b703b0be6d7f30b80fb44ad3b8436348032f59efcf5056930b2b38\u0026#39;, hash: \u0026#39;15c3351282a1c3a5744e101c005243a3df0b9ce781c3a76d55f850c28fd3dbdd\u0026#39;, data: [\u0026#39;why\u0026#39;, \u0026#39;not\u0026#39;, \u0026#39;both?\u0026#39;], difficulty: 1, nonce: 2, }, { timestamp: 1664912416611, lastHash: \u0026#39;15c3351282a1c3a5744e101c005243a3df0b9ce781c3a76d55f850c28fd3dbdd\u0026#39;, hash: \u0026#39;2f0211da93f4ef426f4588c1ba36db5cdbc6802e8ef8156494f9507af253da74\u0026#39;, data: [\u0026#39;not\u0026#39;, \u0026#39;your\u0026#39;, \u0026#39;friend\u0026#39;, \u0026#39;buddy\u0026#39;], difficulty: 1, nonce: 4, }, { timestamp: 1664912432611, lastHash: \u0026#39;2f0211da93f4ef426f4588c1ba36db5cdbc6802e8ef8156494f9507af253da74\u0026#39;, hash: \u0026#39;12e5596c6f124fc0989a2f61cc79b48b5e16a8ce5abfb43ad47d8a531c406d1f\u0026#39;, data: [\u0026#39;not\u0026#39;, \u0026#39;your\u0026#39;, \u0026#39;buddy\u0026#39;, \u0026#39;amigo\u0026#39;], difficulty: 1, nonce: 1, }, ]; export default mockChain;\nin use: import mockChain from \u0026#39;../../../@mocks/blockchain\u0026#39;; import * as chainApi from \u0026#39;../../services/ChainApi\u0026#39;; jest.mock(\u0026#39;../../services/ChainApi\u0026#39;); describe(\u0026#39;components / App\u0026#39;, () =\u0026gt; { it(\u0026#39;should match the snapshot\u0026#39;, async () =\u0026gt; { (chainApi.fetchBlocks as jest.Mock).mockResolvedValueOnce(mockChain); const component = render(\u0026lt;App /\u0026gt;); expect(component.container.firstChild).toMatchSnapshot(); }); });\nWhich may also be easily reused in the negative test:\n// just making something up here as the BlockChain class // itself actually prevents tampered chains const badChain = [...mockChain]; badChain[1].lastHash = \u0026#39;1am4b4dh4xx0r\u0026#39;; (chainApi.fetchBlocks as jest.Mock).mockResolvedValueOnce(badChain); I hope that maybe this can help some of you reduce the cognitive load of your larger TypeScript projects. If you have a variation of this that works even better feel free to drop me a line, I would be grateful to hear about it. Huge thanks go to former co-worker and amazing front-end architect Brian Olson for forcing me to use TypeScript until I learned to enjoy it.\nmy average project root ","date":"10 October 2022","permalink":"/posts/organization-with-ts-at-directories/","section":"Posts","summary":"A set of specialty folders I utilize in TypeScript projects to better organize language specific concepts.","title":"TypeScript: Organization with `@` Directories"},{"content":"","date":"7 October 2022","permalink":"/tags/configuration/","section":"Tags","summary":"","title":"configuration"},{"content":"","date":"7 October 2022","permalink":"/tags/nodejs/","section":"Tags","summary":"","title":"NodeJS"},{"content":"I have a minor peeve, maybe it\u0026rsquo;s just me, but I really dislike random chunks of configuration cluttering up my package.json file. Project generators offered by the likes of Nest and Create React App still leverage the classic pattern of embedding third party configuration values in the package.json, which makes it feel cluttered to me. Really I am just looking to see the dependencies, development dependencies, NPM scripts, and basic project metadata in that file.\nTo illustrate I have just spun up a fresh React project with Create React App and found a configuration section for ESLint and one for Browserslist :\n{ \u0026#34;name\u0026#34;: \u0026#34;whats-new\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;react-scripts test\u0026#34;, \u0026#34;eject\u0026#34;: \u0026#34;react-scripts eject\u0026#34; }, \u0026#34;eslintConfig\u0026#34;: { \u0026#34;extends\u0026#34;: [ \u0026#34;react-app\u0026#34;, \u0026#34;react-app/jest\u0026#34; ] }, \u0026#34;browserslist\u0026#34;: { \u0026#34;production\u0026#34;: [ \u0026#34;\u0026gt;0.2%\u0026#34;, \u0026#34;not dead\u0026#34;, \u0026#34;not op_mini all\u0026#34; ], \u0026#34;development\u0026#34;: [ \u0026#34;last 1 chrome version\u0026#34;, \u0026#34;last 1 firefox version\u0026#34;, \u0026#34;last 1 safari version\u0026#34; ] }, \u0026#34;dependencies\u0026#34;: { \u0026#34;@testing-library/jest-dom\u0026#34;: \u0026#34;^5.14.1\u0026#34;, \u0026#34;@testing-library/react\u0026#34;: \u0026#34;^13.0.0\u0026#34;, \u0026#34;@testing-library/user-event\u0026#34;: \u0026#34;^13.2.1\u0026#34;, \u0026#34;@types/jest\u0026#34;: \u0026#34;^27.0.1\u0026#34;, \u0026#34;@types/node\u0026#34;: \u0026#34;^16.7.13\u0026#34;, \u0026#34;@types/react\u0026#34;: \u0026#34;^18.0.0\u0026#34;, \u0026#34;@types/react-dom\u0026#34;: \u0026#34;^18.0.0\u0026#34;, \u0026#34;react\u0026#34;: \u0026#34;^18.2.0\u0026#34;, \u0026#34;react-dom\u0026#34;: \u0026#34;^18.2.0\u0026#34;, \u0026#34;react-scripts\u0026#34;: \u0026#34;5.0.1\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;^4.4.2\u0026#34;, \u0026#34;web-vitals\u0026#34;: \u0026#34;^2.1.0\u0026#34; } } Most are aware by now that the ESLint configuration can be split out into its own configuration file like so:\n.eslintrc.json { \u0026#34;extends\u0026#34;: [ \u0026#34;react-app\u0026#34;, \u0026#34;react-app/jest\u0026#34; ] }\nwhich, to be fair, does not look like it buys you much. However this is completely barebones before you decided to wire in your testing framework, ensure accessibility, define project coding standards, etc.\nAll of the new config values in this .eslintrc.json would have been a lot of excess content weighing the package.json down distracting from the content you are actually looking to see there. { \u0026#34;root\u0026#34;: true, \u0026#34;parser\u0026#34;: \u0026#34;@typescript-eslint/parser\u0026#34;, \u0026#34;parserOptions\u0026#34;: { \u0026#34;ecmaVersion\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;sourceType\u0026#34;: \u0026#34;module\u0026#34; }, \u0026#34;env\u0026#34;: { \u0026#34;browser\u0026#34;: true, \u0026#34;es2021\u0026#34;: true, \u0026#34;jest/globals\u0026#34;: true, \u0026#34;node\u0026#34;: true }, \u0026#34;extends\u0026#34;: [ \u0026#34;eslint:recommended\u0026#34;, \u0026#34;plugin:@typescript-eslint/eslint-recommended\u0026#34;, \u0026#34;plugin:@typescript-eslint/recommended\u0026#34;, \u0026#34;plugin:prettier/recommended\u0026#34;, \u0026#34;plugin:react/recommended\u0026#34;, \u0026#34;plugin:jest/recommended\u0026#34;, \u0026#34;plugin:jsx-a11y/recommended\u0026#34; ], \u0026#34;overrides\u0026#34;: [ { \u0026#34;files\u0026#34;: [\u0026#34;*.ts\u0026#34;, \u0026#34;*.tsx\u0026#34;], \u0026#34;rules\u0026#34;: { \u0026#34;@typescript-eslint/no-unused-vars\u0026#34;: [2, { \u0026#34;args\u0026#34;: \u0026#34;none\u0026#34; }] } } ], \u0026#34;plugins\u0026#34;: [\u0026#34;@typescript-eslint\u0026#34;, \u0026#34;react\u0026#34;, \u0026#34;react-hooks\u0026#34;, \u0026#34;jest\u0026#34;, \u0026#34;jsx-a11y\u0026#34;], \u0026#34;rules\u0026#34;: { \u0026#34;react/self-closing-comp\u0026#34;: [ \u0026#34;error\u0026#34;, { \u0026#34;component\u0026#34;: true, \u0026#34;html\u0026#34;: true } ], \u0026#34;react/no-array-index-key\u0026#34;: 2, \u0026#34;react/no-danger\u0026#34;: 1, \u0026#34;react/no-deprecated\u0026#34;: 2, \u0026#34;react/no-did-mount-set-state\u0026#34;: 1, \u0026#34;react/no-did-update-set-state\u0026#34;: 1, \u0026#34;react/no-direct-mutation-state\u0026#34;: 2, \u0026#34;react/no-find-dom-node\u0026#34;: 1, \u0026#34;react/no-is-mounted\u0026#34;: 1, \u0026#34;react/no-multi-comp\u0026#34;: 2, \u0026#34;react/no-redundant-should-component-update\u0026#34;: 2, \u0026#34;react/no-render-return-value\u0026#34;: 2, \u0026#34;react/no-typos\u0026#34;: 1, \u0026#34;react/react-in-jsx-scope\u0026#34;: 1, \u0026#34;react/jsx-handler-names\u0026#34;: \u0026#34;off\u0026#34;, \u0026#34;react/jsx-no-duplicate-props\u0026#34;: 2, \u0026#34;react/jsx-fragments\u0026#34;: 2, \u0026#34;react/jsx-pascal-case\u0026#34;: 2, \u0026#34;react/jsx-boolean-value\u0026#34;: 2, \u0026#34;no-unused-vars\u0026#34;: [2, { \u0026#34;vars\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;args\u0026#34;: \u0026#34;after-used\u0026#34;, \u0026#34;argsIgnorePattern\u0026#34;: \u0026#34;_\u0026#34; }], \u0026#34;no-magic-numbers\u0026#34;: [2, { \u0026#34;ignore\u0026#34;: [-1, 0, 1, 2, 10, 100, 3000, 3001] }], \u0026#34;react-hooks/exhaustive-deps\u0026#34;: \u0026#34;warn\u0026#34;, \u0026#34;react-hooks/rules-of-hooks\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;no-prototype-builtins\u0026#34;: \u0026#34;off\u0026#34;, \u0026#34;no-console\u0026#34;: [ \u0026#34;error\u0026#34;, { \u0026#34;allow\u0026#34;: [\u0026#34;error\u0026#34;, \u0026#34;info\u0026#34;, \u0026#34;warn\u0026#34;] } ] }, \u0026#34;settings\u0026#34;: { \u0026#34;react\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;detect\u0026#34; } } }\nIf you were not aware the Browserslist settings can also be broken out into a separate file\n.browserslistrc [production] \u0026gt; 0.25% not dead not op_mini all [development] last 1 chrome version last 1 firefox version last 1 safari version\nLikewise Nest tends to put Jest configuration in the package.json while it can just as easily go into its own JavaScript file:\njest.config.js module.exports = { testRegex: \u0026#39;.*\\\\.test\\\\.tsx?$\u0026#39;, transform: { \u0026#39;^.+\\\\.(t|j)sx?$\u0026#39;: \u0026#39;ts-jest\u0026#39;, }, setupFilesAfterEnv: [\u0026#39;./setupTests.ts\u0026#39;], collectCoverage: true, collectCoverageFrom: [ \u0026#39;**/*.{js,ts,tsx}\u0026#39;, \u0026#39;!src/api/**\u0026#39;, \u0026#39;!coverage/**\u0026#39;, \u0026#39;!data-scripts/**\u0026#39;, \u0026#39;!node_modules/**\u0026#39;, \u0026#39;!**/@enums/**\u0026#39;, \u0026#39;!**/@interfaces/**\u0026#39;, \u0026#39;!**/@mocks/**\u0026#39;, \u0026#39;!**/@types/**\u0026#39;, \u0026#39;!**/**/index.ts\u0026#39;, \u0026#39;!**/**.d.ts\u0026#39;, \u0026#39;!src/client/index.tsx\u0026#39;, \u0026#39;!src/client/services/**\u0026#39;, \u0026#39;!scripts/average-work.ts\u0026#39;, \u0026#39;!jest.config.js\u0026#39;, \u0026#39;!setupTests.ts\u0026#39;, ], coverageThreshold: { global: { branches: 85, functions: 95, statements: 85, }, }, };\nSo any time I find a new section of key-value pairs that I do not think belong in the package.json I consult the documentation to see if an option exists to move it out into a separate file. For me personally the minor expense of a few extra files in my project root for the benefit of having all of the configuration more focused into digestible bits is worth it.\na fairly average project root ","date":"7 October 2022","permalink":"/posts/psa-clean-up-package-json/","section":"Posts","summary":"I have a minor peeve, maybe it\u0026rsquo;s just me, but I really dislike random chunks of configuration cluttering up my package.json file. Project generators offered by the likes of Nest and Create React App still leverage the classic pattern of embedding third party configuration values in the package.","title":"PSA: Cleaning Up package.json"},{"content":"Experience # Company Link Role Dates Location Helix by Q2 Staff Software Engineer 06/2021 - Present Remote Austin, TX\nUSA Kiewit Corporation Sr. Software Engineer 05/2019 - 06/2021 Omaha, NE\nUSA Orion Software Engineer /API Developer 11/2017 - 05/2019 Omaha, NE\nUSA Medefis, Inc. Sr. Programmer 06/2016 - 11/2017 Omaha, NE\nUSA CSG International Sr. User Interface Development Engineer 09/2015 - 06/2016 Omaha, NE\nUSA idea5, Inc. Sr. Full-Stack Developer 06/2013 - 09/2015 Omaha, NE\nUSA Lineage Logistics Sr. Programmer Analyst 05/2012 - 06/2013 Omaha, NE\nUSA Streck Sr. Programmer/Analyst 07/2011 - 05/2012 La Vista, NE\nUSA iNet Solutions Group, Inc. Sr. Developer 08/2007 - 07/2011 Omaha, NE\nUSA Sitel Group Web Developer\n2006 - 2007 05/1999 - 08/2007 Omaha, NE\nUSA Programmer III2002 - 2006 Programmer II\n1999 - 2002 Special Interest # Company Link Role Dates Location Lazarus Software Technology Artisan 05/2014 - Present RemoteOmaha, NEUSA ","date":"5 October 2022","permalink":"/history/","section":"Code-Chimp","summary":"Experience # Company Link Role Dates Location Helix by Q2 Staff Software Engineer 06/2021 - Present Remote Austin, TX\nUSA Kiewit Corporation Sr. Software Engineer 05/2019 - 06/2021 Omaha, NE","title":"History"},{"content":" What I do # I have been shipping code for well over two decades now, and I still really love my work. Currently I am working as a front-end heavy full-stack developer - being a huge fan of the React framework and having decades worth of experience with the .NET ecosystem . I have entirely embraced TypeScript for anything I would normally have written in JavaScript - such as a React front-end, NodeJS middle tier code, or even personal experiments with React Native . Lately I have been focusing on automating my code quality through the use of good static analysis tools like ESLint and Prettier paired with an extensive test suite - usually leveraging Kent C. Dodd\u0026rsquo;s excellent Testing Library to enhance the Jest testing framework (example) .\nHow I got here # the books in the middle opened a new world for me I was bitten by the programming bug after seeing the Disney movie Tron as a young teenager - afterwards ceaselessly bugging my parents until they gave in and purchased a top-of-the line Apple //c for me. That computer introduced me to the world of Apple Basic and 6502 Assembler and still sits in a corner of my office (pic) .\nAfter years of developing in mainframe languages and Visual Basic 6 I finally slid into web development with the first release of ASP.NET. Fast forward a bit and I land at a startup as a \u0026ldquo;C# Cloud Developer\u0026rdquo;, but since I proved to be really handy with jQuery, HTML5 and this new-fangled thing called Sass I was tasked with being the \u0026ldquo;front-end guy\u0026rdquo;. I very quickly learned that I loved the bleeding edge of 2013 front-end development - evaluating frameworks like early AngularJS , Backbone , and Knockout tooling like the Grunt and Gulp task runners and an early bundler called Almond . The rest, as they say, is history as the frameworks, tooling, and discipline of front-end development have only grown more refined since then.\nWhere I am # I live in Omaha, NE with my wife, daughter and three very random rescue dogs. Even though I am not wild about winters here in the Midwest, I cannot seem to talk my wife into moving anywhere else so I am stuck here for the time being. In my spare time I like experimenting with different programming languages and frameworks. When my family manages to get me out of the house I enjoy walking our local botanical gardens , world class zoo , or one of our many - sometimes eclectic - museums .\nMy Apple //c # Jurassic PC in her native environment ","date":"5 October 2022","permalink":"/about/","section":"Code-Chimp","summary":"What I do # I have been shipping code for well over two decades now, and I still really love my work. Currently I am working as a front-end heavy full-stack developer - being a huge fan of the React framework and having decades worth of experience with the .","title":"About"},{"content":"","date":"5 October 2022","permalink":"/tags/greetings/","section":"Tags","summary":"","title":"greetings"},{"content":"Just wanted to say \u0026ldquo;Hi\u0026rdquo; and \u0026ldquo;Thank you\u0026rdquo; for stopping by.\nIf you are curious I am planning this site as more of place for me to keep notes on new things I learn or figure out in a more searchable format than a bunch of random projects on one of my dev boxes. Thanks to the ADD and the excellent marketing departments of places like Frontend Masters , Manning , and Udemy I always have a backlog of shiny new things that I am teaching myself and it has started to become a challenge when attempting to recall \u0026ldquo;what project did I put that cool piece of code in that did that thing I want to do now?\u0026rdquo;.\nWhere is the comments section? I will likely never add a comments section because frankly they are a real pain to police for spam, unproductive flame wars, and really inappropriate content among other things. If you have a question feel free to reach out to me directly via the contact information I have provided here.\nIf you find anything of use in my random stuff - glad that I could be of service.\nHave a great day!\n","date":"5 October 2022","permalink":"/posts/hi/","section":"Posts","summary":"Just wanted to say \u0026ldquo;Hi\u0026rdquo; and \u0026ldquo;Thank you\u0026rdquo; for stopping by.\nIf you are curious I am planning this site as more of place for me to keep notes on new things I learn or figure out in a more searchable format than a bunch of random projects on one of my dev boxes.","title":"Hi"},{"content":"","date":"5 October 2022","permalink":"/categories/irrelevant-drivel/","section":"Categories","summary":"","title":"Irrelevant Drivel"}]