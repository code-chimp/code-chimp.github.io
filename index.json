[{"content":"","date":"2 November 2022","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2 November 2022","externalUrl":null,"permalink":"/","section":"Code-Chimp","summary":"","title":"Code-Chimp","type":"page"},{"content":"","date":"2 November 2022","externalUrl":null,"permalink":"/tags/configuration/","section":"Tags","summary":"","title":"Configuration","type":"tags"},{"content":"","date":"2 November 2022","externalUrl":null,"permalink":"/categories/new-tech/","section":"Categories","summary":"","title":"New Tech","type":"categories"},{"content":"","date":"2 November 2022","externalUrl":null,"permalink":"/tags/nodejs/","section":"Tags","summary":"","title":"NodeJS","type":"tags"},{"content":"For unit tests we will still be using the excellent Testing Library, but we will swap Vitest in place of Jest. Vitest promises Jest compatibility without having to duplicate a bunch of configuration to get Jest to function correctly with a Vite project.\nConfigure Testing # Let\u0026rsquo;s install the packages that we will need for creating unit tests:\nyarn add --dev vitest @vitest/coverage-istanbul jsdom @testing-library/jest-dom \\ @testing-library/react @testing-library/react-hooks @testing-library/user-event \\ redux-mock-store # add missing typings to package.json npx typesync # install the typings found by typesync yarn We can just lift /src/setupTests.ts as-is from our previous project.\nSince I like to explicitly separate configurations based on usage I chose the third option from the documentation for creating a vitest.config.ts file. The coverage.include and coverage.exclude values are translated from the jest.collectCoverageFrom section of my CRA project\u0026rsquo;s package.json . coverage.branches/function/statements were pulled from jest.coverageThreshold.global values in the same file.\nfile: vitest.config.ts import { mergeConfig } from \u0026#39;vite\u0026#39;; import { defineConfig } from \u0026#39;vitest/config\u0026#39;; import viteConfig from \u0026#39;./vite.config\u0026#39;; export default mergeConfig( viteConfig, defineConfig({ test: { environment: \u0026#39;jsdom\u0026#39;, // we do not want to have to import \u0026#39;expect\u0026#39;, etc. on every file globals: true, setupFiles: \u0026#39;./src/setupTests.ts\u0026#39;, coverage: { provider: \u0026#39;istanbul\u0026#39;, // if \u0026#39;false\u0026#39; does not show our uncovered files all: true, include: [\u0026#39;src/**/*.{ts,tsx}\u0026#39;], exclude: [ \u0026#39;src/@enums/**\u0026#39;, \u0026#39;src/@interfaces/**\u0026#39;, \u0026#39;src/@mocks/**\u0026#39;, \u0026#39;src/@types/**\u0026#39;, \u0026#39;src/services/**\u0026#39;, \u0026#39;src/**/index.{ts,tsx}\u0026#39;, \u0026#39;src/main.tsx\u0026#39;, \u0026#39;src/routes.tsx\u0026#39;, ], branches: 85, functions: 90, statements: 90, }, }, }), );\nThe TypeScript compiler will need to know of Vitest\u0026rsquo;s globals:\nfile: tsconfig.json { \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;ESNext\u0026#34;, \u0026#34;useDefineForClassFields\u0026#34;: true, \u0026#34;lib\u0026#34;: [\u0026#34;DOM\u0026#34;, \u0026#34;DOM.Iterable\u0026#34;, \u0026#34;ESNext\u0026#34;], \u0026#34;allowJs\u0026#34;: false, \u0026#34;skipLibCheck\u0026#34;: true, \u0026#34;esModuleInterop\u0026#34;: false, \u0026#34;allowSyntheticDefaultImports\u0026#34;: true, \u0026#34;strict\u0026#34;: true, \u0026#34;forceConsistentCasingInFileNames\u0026#34;: true, \u0026#34;module\u0026#34;: \u0026#34;ESNext\u0026#34;, \u0026#34;moduleResolution\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;resolveJsonModule\u0026#34;: true, \u0026#34;isolatedModules\u0026#34;: true, \u0026#34;noEmit\u0026#34;: true, \u0026#34;jsx\u0026#34;: \u0026#34;react-jsx\u0026#34;, \u0026#34;types\u0026#34;: [\u0026#34;vitest/globals\u0026#34;] }, \u0026#34;include\u0026#34;: [\u0026#34;src\u0026#34;], \u0026#34;references\u0026#34;: [{ \u0026#34;path\u0026#34;: \u0026#34;./tsconfig.node.json\u0026#34; }] }\nDefine a couple of NPM scripts for convenience:\nfile: package.json \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;vite\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;tsc \u0026amp;\u0026amp; vite build\u0026#34;, \u0026#34;preview\u0026#34;: \u0026#34;vite preview\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;pretty-quick --staged\u0026#34;, \u0026#34;format:check\u0026#34;: \u0026#34;prettier --check .\u0026#34;, \u0026#34;format:fix\u0026#34;: \u0026#34;prettier --write .\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;run-p lint:*\u0026#34;, \u0026#34;lint:ts\u0026#34;: \u0026#34;eslint ./src/**/**.ts*\u0026#34;, \u0026#34;lint:styles\u0026#34;: \u0026#34;stylelint \\\u0026#34;./src/**/*.scss\\\u0026#34;\u0026#34;, \u0026#34;fix:styles\u0026#34;: \u0026#34;stylelint \\\u0026#34;./src/**/*.scss\\\u0026#34; --fix\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;vitest --run\u0026#34;, \u0026#34;test:cov\u0026#34;: \u0026#34;vitest run --coverage\u0026#34;, \u0026#34;prepare\u0026#34;: \u0026#34;husky install\u0026#34; },\nFinally add our coverage thresholds to the pre-commit hook:\nnpx husky add .husky/pre-commit \u0026#34;npm run test:cov\u0026#34; Port a Simple Test # For the first test I want to bring over something really simple so I believe my service helpers will be a good place to start. We should be able to get away with only modifying the one line dealing with pulling a value from the .env file:\nfile: /src/helpers/service.test.ts import { createDeleteRequest, createGetRequest, createPatchRequest, createPostRequest, createPutRequest, processApiResponse, unwrapServiceError, } from \u0026#39;./service\u0026#39;; import FetchMethods from \u0026#39;../@enums/FetchMethods\u0026#39;; import HttpStatusCodes from \u0026#39;../@enums/HttpStatusCodes\u0026#39;; import IApiBaseResponse from \u0026#39;../@interfaces/IApiBaseResponse\u0026#39;; import { GENERIC_SERVICE_ERROR } from \u0026#39;../constants\u0026#39;; const adminApiUri = import.meta.env.VITE_API_URI; const fakeEndpoint = \u0026#39;/api/22.19/bubbas/burger/barn\u0026#39;; describe(\u0026#39;helpers / service\u0026#39;, () =\u0026gt; { describe(\u0026#39;createGetRequest\u0026#39;, () =\u0026gt; { it(\u0026#39;should generate a Request with a `GET` method\u0026#39;, () =\u0026gt; { const result: Request = createGetRequest(fakeEndpoint); expect(result.method).toBe(FetchMethods.Get); // there will be an underscore (_) query param appended to the url since we // have cache set to false for all requests expect(result.url.startsWith(`${adminApiUri}${fakeEndpoint}`)).toBe(true); expect(result.headers.has(\u0026#39;Authorization\u0026#39;)).toBe(false); expect(result.headers.has(\u0026#39;Content-Type\u0026#39;)).toBe(false); }); ... it(\u0026#39;should return a standard Error from a custom thrown error\u0026#39;, () =\u0026gt; { const sut = { message: \u0026#39;yeah, no\u0026#39;, errors: [\u0026#39;you should see me\u0026#39;, \u0026#39;but not me\u0026#39;], }; const methodName = \u0026#39;unwrapped\u0026#39;; const serviceError: any = unwrapServiceError(methodName, sut); expect(serviceError.message).toBe(`${methodName} error: ${sut.errors[0]}`); expect(serviceError.message).not.toBe(`${methodName} error: ${sut.errors[1]}`); }); }); });\nLooks like a success:\n➜ vite-redux-seed (main) ✗ yarn test RUN v0.24.4 /home/tgoshinski/work/lab/react/vite-redux-seed ✓ src/helpers/service.test.ts (15) Test Files 1 passed (1) Tests 15 passed (15) Start at 22:24:59 Duration 2.26s (transform 681ms, setup 217ms, collect 99ms, tests 31ms) Process finished with exit code 0. Port Redux Slice Tests # May as well start alphabetically with the alerts slice tests. Mocking with Vitest is very similar to mocking in Jest, so there were only a few modifications that needed to be made to get this test working. First we need to import the Mock interface from Vitest and replace all jest.Mock\u0026lt;any, any\u0026gt; with just Mock\u0026lt;any, any\u0026gt;. Next jest.mock('uuid') becomes vi.mock('uuid'):\nfile: /src/store/slices/alerts.test.ts import { Mock } from \u0026#39;vitest\u0026#39;; import { alerts } from \u0026#39;./alerts\u0026#39;; import AlertTypes from \u0026#39;../../@enums/AlertTypes\u0026#39;; import IAlert from \u0026#39;../../@interfaces/IAlert\u0026#39;; import { v4 } from \u0026#39;uuid\u0026#39;; vi.mock(\u0026#39;uuid\u0026#39;); describe(\u0026#39;store / slices / alerts\u0026#39;, () =\u0026gt; { describe(\u0026#39;reducer(s)\u0026#39;, () =\u0026gt; { const initialState: Array\u0026lt;IAlert\u0026gt; = [ { id: \u0026#39;foo\u0026#39;, type: AlertTypes.Error, text: \u0026#39;i broke it\u0026#39; }, { id: \u0026#39;bar\u0026#39;, type: AlertTypes.Info, text: \u0026#39;it was brokded when I got here\u0026#39; }, { id: \u0026#39;baz\u0026#39;, type: AlertTypes.Warning, text: \u0026#34;keep your fingers away from Lenny\u0026#39;s mouth\u0026#34;, }, ]; const mockedUuid = v4 as Mock\u0026lt;any, any\u0026gt;; const mockUuidValue = \u0026#39;some-unique-guidy-thing\u0026#39;; it(\u0026#39;should remove an alert by id\u0026#39;, () =\u0026gt; { const { removeAlert } = alerts.actions; const alertId = \u0026#39;bar\u0026#39;; const expected: Array\u0026lt;IAlert\u0026gt; = initialState.filter(a =\u0026gt; a.id !== alertId); const state = alerts.reducer(initialState, removeAlert(alertId)); expect(state.some(_ =\u0026gt; _.id === alertId)).toBe(false); expect(state).toEqual(expected); }); ... it(\u0026#39;should add a warning alert with a generated uuid\u0026#39;, () =\u0026gt; { mockedUuid.mockImplementationOnce(() =\u0026gt; mockUuidValue); const { addWarningAlert } = alerts.actions; const payload: IAlert = { id: \u0026#39;really-why-do-you-read-these\u0026#39;, type: AlertTypes.Warning, text: \u0026#39;do not put that in your eye\u0026#39;, }; const expected: Array\u0026lt;IAlert\u0026gt; = [...initialState, { ...payload, id: mockUuidValue }]; const state = alerts.reducer(initialState, addWarningAlert(payload)); expect(state).toEqual(expected); }); }); });\nRun the slice tests:\n➜ vite-redux-seed (main) ✗ yarn test RUN v0.24.4 /home/tgoshinski/work/lab/react/vite-redux-seed ✓ src/store/slices/alerts.test.ts (5) Test Files 1 passed (1) Tests 5 passed (5) Start at 22:47:57 Duration 2.24s (transform 736ms, setup 195ms, collect 163ms, tests 7ms) Process finished with exit code 0. Now we can bring over the rest of the store slice tests:\n/src/store/slices/counter.test.ts : required no modification /src/store/slices/toasts.test.ts : required the same modifications as alerts /src/store/slices/user.test.ts : required the same modifications as alerts, also remember to copy this /src/@mocks folder from the CRA project Port Component Tests # The good news is I did not need to modify any of my component tests - they all just worked as originally written for Jest:\n/src/components/app/AppAlerts/AppAlerts.test.tsx /src/components/app/AppAlerts/Alert/Alert.test.tsx /src/components/app/AppToasts/AppToasts.test.tsx /src/components/app/AppToasts/Toast/Toast.test.tsx /src/pages/Counter/Counter.test.tsx /src/pages/Users/Users.test.tsx Final Sweep # Putting it all together let\u0026rsquo;s commit all of our hard work:\n➜ vite-redux-seed (main) ✗ git add -A ➜ vite-redux-seed (main) ✗ git commit -m \u0026#39;:white_check_mark: unit tests\u0026#39; \u0026gt; vite-redux-seed@0.1.0 format \u0026gt; pretty-quick --staged 🔍 Finding changed files since git revision 6560904. 🎯 Found 17 changed files. ✅ Everything is awesome! RUN v0.24.4 /home/tgoshinski/work/lab/react/vite-redux-seed Coverage enabled with istanbul ✓ src/helpers/service.test.ts (15) ✓ src/components/app/AppToasts/Toast/Toast.test.tsx (7) 546ms ✓ src/helpers/service.test.ts (15) ✓ src/components/app/AppToasts/Toast/Toast.test.tsx (7) 546ms ✓ src/components/app/AppToasts/AppToasts.test.tsx (1) 325ms ✓ src/pages/Counter/Counter.test.tsx (4) 306ms ✓ src/components/app/AppAlerts/Alert/Alert.test.tsx (9) 376ms ✓ src/components/app/AppAlerts/AppAlerts.test.tsx (1) ✓ src/pages/Users/Users.test.tsx (5) 315ms ✓ src/store/slices/user.test.ts (8) ✓ src/store/slices/toasts.test.ts (5) ✓ src/store/slices/alerts.test.ts (5) ✓ src/store/slices/counter.test.ts (3) Test Files 11 passed (11) Tests 63 passed (63) Start at 08:42:58 Duration 11.68s (transform 1.56s, setup 2.98s, collect 6.56s, tests 2.25s) % Coverage report from istanbul ------------------------------------|---------|----------|---------|---------|------------------- File | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s ------------------------------------|---------|----------|---------|---------|------------------- All files | 85.99 | 83.67 | 79.72 | 86.66 | src | 100 | 93.33 | 100 | 100 | helpers | 100 | 93.33 | 100 | 100 | 53 src/components/app/AppAlerts | 100 | 100 | 100 | 100 | AppAlerts.tsx | 100 | 100 | 100 | 100 | src/components/app/AppAlerts/Alert | 95.23 | 100 | 75 | 95.23 | Alert.tsx | 95.23 | 100 | 75 | 95.23 | 28 src/components/app/AppToasts | 100 | 100 | 100 | 100 | AppToasts.tsx | 100 | 100 | 100 | 100 | src/components/app/AppToasts/Toast | 96.66 | 100 | 75 | 96.66 | Toast.tsx | 96.66 | 100 | 75 | 96.66 | 31 src/components/app/Navigation | 0 | 100 | 0 | 0 | Navigation.tsx | 0 | 100 | 0 | 0 | 7-8 src/helpers | 100 | 100 | 100 | 100 | hooks.ts | 100 | 100 | 100 | 100 | src/layouts/MainLayout | 0 | 100 | 0 | 0 | MainLayout.tsx | 0 | 100 | 0 | 0 | 10-11 src/pages/Counter | 100 | 100 | 100 | 100 | Counter.tsx | 100 | 100 | 100 | 100 | src/pages/FourOhFour | 0 | 0 | 0 | 0 | FourOhFour.tsx | 0 | 0 | 0 | 0 | 6-9 src/pages/NotificationsDemo | 0 | 100 | 0 | 0 | NotificationsDemo.tsx | 0 | 100 | 0 | 0 | 18-45 src/pages/Users | 100 | 76.92 | 100 | 100 | Users.tsx | 100 | 76.92 | 100 | 100 | 44-46 src/store/slices | 98.61 | 75 | 97.36 | 100 | alerts.ts | 100 | 100 | 100 | 100 | counter.ts | 100 | 100 | 100 | 100 | toasts.ts | 100 | 100 | 100 | 100 | user.ts | 96.42 | 66.66 | 90 | 100 | 28,61 ------------------------------------|---------|----------|---------|---------|------------------- ERROR: Coverage for functions (79.72%) does not meet global threshold (90%) ERROR: Coverage for statements (85.99%) does not meet global threshold (90%) ERROR: Coverage for branches (83.67%) does not meet global threshold (85%) husky - pre-commit hook exited with code 1 (error) ESBuild Problem and Workaround # We should have met our coverage thresholds since we have pulled all of the same tests from the previous CRA project, but on the bright side we have confirmed that our pre-commit hook works.\nIt appears our istanbul directives (ex: /* istanbul ignore file */), for files like NotificationsDemo.tsx are not being honored. Searching the issues tracker on Vitest\u0026rsquo;s Github I found the issue appears to be ESBuild is stripping those directive comments out when transpiling the file. The workaround that seemed the least invasive to me was explicitly telling ESBuild to preserve those comments by changing /* istanbul ignore file */ to /* istanbul ignore file -- @preserve */.\nSee files:\n/src/components/app/Navigation/Navigation.tsx /src/helpers/hooks.ts /src/layouts/MainLayout/MainLayout.tsx /src/pages/FourOhFour/FourOhFour.tsx /src/pages/NotificationsDemo/NotificationsDemo.tsx With those files being excluded from coverage we should now be well within our coverage thresholds and able to commit our files:\n➜ vite-redux-seed (main) ✗ git add -A ➜ vite-redux-seed (main) ✗ git commit -m \u0026#39;:white_check_mark: unit tests\u0026#39; \u0026gt; vite-redux-seed@0.1.0 format \u0026gt; pretty-quick --staged 🔍 Finding changed files since git revision 6560904. 🎯 Found 21 changed files. ✅ Everything is awesome! RUN v0.24.4 /home/tgoshinski/work/lab/react/vite-redux-seed Coverage enabled with istanbul ✓ src/components/app/AppToasts/Toast/Toast.test.tsx (7) 477ms ✓ src/components/app/AppAlerts/Alert/Alert.test.tsx (9) ✓ src/components/app/AppToasts/Toast/Toast.test.tsx (7) 477ms ✓ src/components/app/AppAlerts/Alert/Alert.test.tsx (9) ✓ src/components/app/AppToasts/AppToasts.test.tsx (1) 352ms ✓ src/pages/Users/Users.test.tsx (5) ✓ src/pages/Counter/Counter.test.tsx (4) ✓ src/components/app/AppAlerts/AppAlerts.test.tsx (1) ✓ src/helpers/service.test.ts (15) ✓ src/store/slices/user.test.ts (8) ✓ src/store/slices/toasts.test.ts (5) ✓ src/store/slices/alerts.test.ts (5) ✓ src/store/slices/counter.test.ts (3) Test Files 11 passed (11) Tests 63 passed (63) Start at 09:38:03 Duration 10.97s (transform 1.82s, setup 3.09s, collect 6.26s, tests 2.06s) % Coverage report from istanbul ------------------------------------|---------|----------|---------|---------|------------------- File | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s ------------------------------------|---------|----------|---------|---------|------------------- All files | 98.34 | 87.23 | 95.16 | 98.83 | src | 100 | 93.33 | 100 | 100 | helpers | 100 | 93.33 | 100 | 100 | 53 src/components/app/AppAlerts | 100 | 100 | 100 | 100 | AppAlerts.tsx | 100 | 100 | 100 | 100 | src/components/app/AppAlerts/Alert | 95.23 | 100 | 75 | 95.23 | Alert.tsx | 95.23 | 100 | 75 | 95.23 | 28 src/components/app/AppToasts | 100 | 100 | 100 | 100 | AppToasts.tsx | 100 | 100 | 100 | 100 | src/components/app/AppToasts/Toast | 96.66 | 100 | 75 | 96.66 | Toast.tsx | 96.66 | 100 | 75 | 96.66 | 31 src/helpers | 100 | 100 | 100 | 100 | hooks.ts | 100 | 100 | 100 | 100 | src/pages/Counter | 100 | 100 | 100 | 100 | Counter.tsx | 100 | 100 | 100 | 100 | src/pages/Users | 100 | 76.92 | 100 | 100 | Users.tsx | 100 | 76.92 | 100 | 100 | 44-46 src/store/slices | 98.61 | 75 | 97.36 | 100 | alerts.ts | 100 | 100 | 100 | 100 | counter.ts | 100 | 100 | 100 | 100 | toasts.ts | 100 | 100 | 100 | 100 | user.ts | 96.42 | 66.66 | 90 | 100 | 28,61 ------------------------------------|---------|----------|---------|---------|------------------- [main 2da7f0b] :white_check_mark: unit tests 29 files changed, 2902 insertions(+), 34 deletions(-) create mode 100644 src/@mocks/users.ts create mode 100644 src/components/app/AppAlerts/Alert/Alert.test.tsx create mode 100644 src/components/app/AppAlerts/Alert/__snapshots__/Alert.test.tsx.snap create mode 100644 src/components/app/AppAlerts/AppAlerts.test.tsx create mode 100644 src/components/app/AppAlerts/__snapshots__/AppAlerts.test.tsx.snap create mode 100644 src/components/app/AppToasts/AppToasts.test.tsx create mode 100644 src/components/app/AppToasts/Toast/Toast.test.tsx create mode 100644 src/components/app/AppToasts/Toast/__snapshots__/Toast.test.tsx.snap create mode 100644 src/components/app/AppToasts/__snapshots__/AppToasts.test.tsx.snap create mode 100644 src/helpers/service.test.ts create mode 100644 src/pages/Counter/Counter.test.tsx create mode 100644 src/pages/Counter/__snapshots__/Counter.test.tsx.snap create mode 100644 src/pages/Users/Users.test.tsx create mode 100644 src/pages/Users/__snapshots__/Users.test.tsx.snap create mode 100644 src/setupTests.ts create mode 100644 src/store/slices/alerts.test.ts create mode 100644 src/store/slices/counter.test.ts create mode 100644 src/store/slices/toasts.test.ts create mode 100644 src/store/slices/user.test.ts create mode 100644 vitest.config.ts Final Thoughts # Porting a small demo application was not really difficult and I am happy with the results. I would actually have to tackle a real-world project to determine if Vite is a better alternative for me than Create React App but at least I have determined that I will not have to sacrifice any of the code quality tooling I have been relying on.\nIf I had to choose something to complain about it would be that Vitest\u0026rsquo;s integration with WebStorm is not as seamless as Jest\u0026rsquo;s. Jest\u0026rsquo;s test runner\u0026rsquo;s coverage analysis integration is second to none and I really miss that with the Vitest test runner:\nNote the subtle gutter indicators for covered lines in alerts.ts\nThe debugger appears to work as well with Vitest as Jest though, so that is a plus:\nVery similar to debugging tests written with Jest\nIf Vite continues to gain traction I am sure WebStorm\u0026rsquo;s tooling will catch up just as it did when newer tech like Tailwind CSS became a hit. I am not a big user of Visual Studio Code so I can not speak to plugin support on that particular IDE. From the command line everything works just as well as using Jest so really it is just a GUI-user\u0026rsquo;s annoyance more than any kind of hindrance.\nUnless Create React App is a hard requirement I will likely give Vite a chance with the next project I get to spin up from scratch. Thank you for stopping by, I hope you found something useful here.\nUpdate 2022-11-28 # As of WebStorm 2022.3 Vite and Vitest are now fully integrated into the IDE as first class citizens - no more third party plugins needed:\nWebStorm\u0026rsquo;s test runner! Yay!\n","date":"2 November 2022","externalUrl":null,"permalink":"/posts/porting-cra-to-vite-2/","section":"Posts","summary":"\u003cp\u003eFor unit tests we will still be using the excellent \u003ca href=\"https://testing-library.com/\"title=\"Simple and complete testing utilities that encourage good testing practices\" target=\"_blank\"\u003eTesting Library\u003c/a\u003e, but we will swap \u003ca href=\"https://vitest.dev/\"title=\"Vite-native unit test framework\" target=\"_blank\"\u003eVitest\u003c/a\u003e in place of\n\u003ca href=\"https://jestjs.io/\"title=\"Delightful JavaScript Testing Framework with a focus on simplicity\" target=\"_blank\"\u003eJest\u003c/a\u003e. Vitest promises Jest compatibility without having to duplicate a bunch of configuration to get Jest to\nfunction correctly with a Vite project.\u003c/p\u003e","title":"Porting a Create React App application to Vite Pt. 2: Unit Testing","type":"posts"},{"content":"","date":"2 November 2022","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2 November 2022","externalUrl":null,"permalink":"/categories/project-architecture/","section":"Categories","summary":"","title":"Project Architecture","type":"categories"},{"content":"","date":"2 November 2022","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2 November 2022","externalUrl":null,"permalink":"/tags/testing/","section":"Tags","summary":"","title":"Testing","type":"tags"},{"content":" Why? # Vite\u0026rsquo;s primary value proposition is a faster, more performant developer experience. Vite is powered by Rollup and ESBuild, a JavaScript bundler written in Go, while Create React App leverages the stable, battle tested, combination of WebPack and the Babel transpiler.\nSo, if I am happy with Create React App then why this port?\nEvaluate the Hype - I like to try out the new tech and see if it can improve my workflow Pet Peeve - CRA does not give you full control of your Jest configuration, plus it pollutes package.json with the configuration values that you are allowed to specify To do it - I learn a lot from little experiments like this I am breaking this into two parts in an attempt to keep the information digestible. This first part will focus on getting the application to run in the browser, identical to the CRA version, along with the same quality assurance tooling that mostly comes out of the box with CRA. Part two will focus on unit tests and enforcing test coverage.\nAs always use your own judgement before pursuing the next-shiny-thing, because for all I know CRA may soon be able to leverage the new TurboPack proposed WebPack successor and re-claim the speed title.\nPreflight # Create a Clean Shell # Let\u0026rsquo;s begin by scaffolding the new project from Vite\u0026rsquo;s minimal React + TypeScript template:\nyarn create vite vite-redux-seed --template react-ts cd vite-redux-seed yarn \u0026raquo; First Commit\nAdd Static Code Analysis # Setting up some basic static analysis tooling is a fairly easy, and inexpensive, way of ensuring basic code quality and consistency. As an added bonus there are plugins for ESLint such as jsx-a11y to alert me when I am inadvertently creating accessibility issues in my application. I highly recommend the typesync command to save time by automatically finding any missing typings for your packages.\nyarn add --dev npm-run-all browserslist sass prettier eslint stylelint \\ @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-prettier \\ eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-react-hooks \\ stylelint-config-prettier stylelint-config-recommended-scss stylelint-scss \\ postcss # add missing typings to package.json npx typesync # install the typings found by typesync yarn Now we can pull most of our code-quality configuration files straight over from the old project:\n.browserslistrc : browsers we are promising to support .editorconfig : basic text editor settings such as default line endings .eslintignore : files/folders we do not want ESLint to analyze .prettierrc : source code format rules .prettierignore : files/folders Prettier should ignore .stylelintrc.json : stylesheet format rules Create React App sets many defaults for ESLint that we will have to explicitly mimic ourselves in a new custom ESLint config file:\nfile: .eslintrc.json { \u0026#34;root\u0026#34;: true, \u0026#34;env\u0026#34;: { \u0026#34;browser\u0026#34;: true, \u0026#34;node\u0026#34;: true }, \u0026#34;parser\u0026#34;: \u0026#34;@typescript-eslint/parser\u0026#34;, \u0026#34;parserOptions\u0026#34;: { \u0026#34;ecmaVersion\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;sourceType\u0026#34;: \u0026#34;module\u0026#34; }, \u0026#34;plugins\u0026#34;: [\u0026#34;@typescript-eslint\u0026#34;, \u0026#34;react\u0026#34;, \u0026#34;react-hooks\u0026#34;, \u0026#34;jsx-a11y\u0026#34;], \u0026#34;extends\u0026#34;: [ \u0026#34;eslint:recommended\u0026#34;, \u0026#34;plugin:react/recommended\u0026#34;, \u0026#34;plugin:react-hooks/recommended\u0026#34;, \u0026#34;plugin:jsx-a11y/recommended\u0026#34;, \u0026#34;prettier\u0026#34; ], \u0026#34;rules\u0026#34;: { \u0026#34;no-magic-numbers\u0026#34;: [2, { \u0026#34;ignore\u0026#34;: [-1, 0, 1, 2, 10, 100, 1000] }], \u0026#34;no-unused-vars\u0026#34;: [2, { \u0026#34;vars\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;args\u0026#34;: \u0026#34;after-used\u0026#34;, \u0026#34;argsIgnorePattern\u0026#34;: \u0026#34;_\u0026#34; }], \u0026#34;no-console\u0026#34;: [ \u0026#34;error\u0026#34;, { \u0026#34;allow\u0026#34;: [\u0026#34;error\u0026#34;, \u0026#34;info\u0026#34;, \u0026#34;warn\u0026#34;] } ] }, \u0026#34;settings\u0026#34;: { \u0026#34;react\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;detect\u0026#34; } } }\nNow that our tools are installed and configured let\u0026rsquo;s artificially create an accessibility error by removing an alt property from our image tag and verify it causes a linting error:\nLinting works\n\u0026raquo; Second Commit\nAs we can now verify that the linter is working why don\u0026rsquo;t we take the next step and explicitly enforce our choices with a git hook. First we will need a couple of packages:\nHusky to easily create hooks for this project Pretty-Quick to automatically apply our predefined code formatting standards yarn add --dev pretty-quick husky npx husky install npm pkg set scripts.prepare=\u0026#34;husky install\u0026#34; I have added a few scripts to help with project maintenance - the two highlighted below will ensure that all code is in our defined format, and that any linting issues will cause an error:\nfile: package.json \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;vite\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;tsc \u0026amp;\u0026amp; vite build\u0026#34;, \u0026#34;preview\u0026#34;: \u0026#34;vite preview\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;pretty-quick --staged\u0026#34;, \u0026#34;format:check\u0026#34;: \u0026#34;prettier --check .\u0026#34;, \u0026#34;format:fix\u0026#34;: \u0026#34;prettier --write .\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;run-p lint:*\u0026#34;, \u0026#34;lint:ts\u0026#34;: \u0026#34;eslint ./src/**/**.ts*\u0026#34;, \u0026#34;lint:styles\u0026#34;: \u0026#34;stylelint \\\u0026#34;./src/**/*.scss\\\u0026#34;\u0026#34;, \u0026#34;fix:styles\u0026#34;: \u0026#34;stylelint \\\u0026#34;./src/**/*.scss\\\u0026#34; --fix\u0026#34;, \u0026#34;prepare\u0026#34;: \u0026#34;husky install\u0026#34; },\nOnce they are added to a pre-commit hook any commit that is attempted with style or code linting errors will automatically be aborted:\nnpx husky add .husky/pre-commit \u0026#34;npm run format\u0026#34; npx husky add .husky/pre-commit \u0026#34;npm run lint\u0026#34; \u0026raquo; Third Commit\nPorting the Application # Let\u0026rsquo;s first make sure that the project will run, by replacing the contents of the src folder with everything from the vanilla CRA project - excluding tests and snapshots for now. We will need to rename src/index.tsx, Create React App\u0026rsquo;s default root component, to src/main.tsx which is Vite\u0026rsquo;s default. Before trying to run it we need to install all of our missing packages:\nyarn add @fortawesome/fontawesome-svg-core @fortawesome/free-brands-svg-icons \\ @fortawesome/free-regular-svg-icons @fortawesome/free-solid-svg-icons \\ @fortawesome/react-fontawesome @reduxjs/toolkit bootstrap @popperjs/core \\ react-bootstrap react-redux react-router-dom redux uuid # add missing typings to package.json npx typesync # install the typings found by typesync yarn .env Changes # I utilized Create React App\u0026rsquo;s .env file to store a sample third party API URL:\nfile: .env (old app)\nREACT_APP_API_URI=https://jsonplaceholder.typicode.com It will need to be changed to Vite\u0026rsquo;s format:\nfile: .env VITE_API_URI=https://jsonplaceholder.typicode.com Let\u0026rsquo;s also add type information for our custom environment variable(s):\nfile: /src/env.d.ts /// \u0026lt;reference types=\u0026#34;vite/client\u0026#34; /\u0026gt; interface ImportMetaEnv { readonly VITE_API_URI: string; } interface ImportMeta { readonly env: ImportMetaEnv; }\nAnd finally update the reference in the service helper:\nfile: /src/helpers/service.ts ... const apiUri = process.env.REACT_APP_API_URI; ...\nbecomes:\nfile: /src/helpers/service.ts ... const apiUri = import.meta.env.VITE_API_URI; ...\nFirst Test Run # Let\u0026rsquo;s see how far that has gotten us:\nyarn dev Ew, yuck\nFix Bootstrap\u0026rsquo;s Sass Import # It appears that we need to tell Vite how to resolve ~bootstrap from /src/styles/global.scss:\nfile: vite.config.ts import { resolve } from \u0026#39;path\u0026#39;; import { defineConfig } from \u0026#39;vite\u0026#39;; import react from \u0026#39;@vitejs/plugin-react\u0026#39;; // https://vitejs.dev/config/ export default defineConfig({ plugins: [react()], resolve: { alias: { \u0026#39;~bootstrap\u0026#39;: resolve(__dirname, \u0026#39;node_modules/bootstrap\u0026#39;), }, }, });\nBut now I have angered WebStorm I missed something again\nLucky for me this is an easy fix by adding the NodeJS typings to the project:\nyarn add --dev @types/node Second Test # Now if we refresh or re-run yarn dev the running application looks okay: The application appears to work\nQuality Assurance Sweep # Better verify what the linter sees:\n➜ vite-redux-seed (main) ✗ yarn lint yarn run v1.22.19 $ run-p lint:* $ eslint ./src/**/**.ts* $ stylelint \u0026#34;./src/**/*.scss\u0026#34; /home/tgoshinski/work/lab/react/vite-redux-seed/src/@enums/AlertTypes.ts 1:6 error \u0026#39;AlertTypes\u0026#39; is defined but never used no-unused-vars 2:3 error \u0026#39;Error\u0026#39; is defined but never used no-unused-vars 3:3 error \u0026#39;Info\u0026#39; is defined but never used no-unused-vars 4:3 error \u0026#39;Success\u0026#39; is defined but never used no-unused-vars 5:3 error \u0026#39;Warning\u0026#39; is defined but never used no-unused-vars /home/tgoshinski/work/lab/react/vite-redux-seed/src/@enums/AppRoutes.ts 1:6 error \u0026#39;AppRoutes\u0026#39; is defined but never used no-unused-vars 2:3 error \u0026#39;Home\u0026#39; is defined but never used no-unused-vars 3:3 error \u0026#39;Users\u0026#39; is defined but never used no-unused-vars 4:3 error \u0026#39;Notifications\u0026#39; is defined but never used no-unused-vars 5:3 error \u0026#39;Fallthrough\u0026#39; is defined but never used no-unused-vars /home/tgoshinski/work/lab/react/vite-redux-seed/src/@enums/AsyncStates.ts 1:6 error \u0026#39;AsyncStates\u0026#39; is defined but never used no-unused-vars 2:3 error \u0026#39;Idle\u0026#39; is defined but never used no-unused-vars 3:3 error \u0026#39;Pending\u0026#39; is defined but never used no-unused-vars 4:3 error \u0026#39;Success\u0026#39; is defined but never used no-unused-vars 5:3 error \u0026#39;Fail\u0026#39; is defined but never used no-unused-vars /home/tgoshinski/work/lab/react/vite-redux-seed/src/@enums/FetchMethods.ts 1:6 error \u0026#39;FetchMethods\u0026#39; is defined but never used no-unused-vars 2:3 error \u0026#39;Delete\u0026#39; is defined but never used no-unused-vars 3:3 error \u0026#39;Get\u0026#39; is defined but never used no-unused-vars 4:3 error \u0026#39;Patch\u0026#39; is defined but never used no-unused-vars 5:3 error \u0026#39;Post\u0026#39; is defined but never used no-unused-vars 6:3 error \u0026#39;Put\u0026#39; is defined but never used no-unused-vars /home/tgoshinski/work/lab/react/vite-redux-seed/src/@enums/HttpStatusCodes.ts 2:6 error \u0026#39;HttpStatusCodes\u0026#39; is defined but never used no-unused-vars 3:3 error \u0026#39;Ok\u0026#39; is defined but never used no-unused-vars 4:3 error \u0026#39;Created\u0026#39; is defined but never used no-unused-vars 5:3 error \u0026#39;Accepted\u0026#39; is defined but never used no-unused-vars 6:3 error \u0026#39;NoContent\u0026#39; is defined but never used no-unused-vars 7:3 error \u0026#39;MovedPermanently\u0026#39; is defined but never used no-unused-vars 8:3 error \u0026#39;Redirect\u0026#39; is defined but never used no-unused-vars 9:3 error \u0026#39;BadRequest\u0026#39; is defined but never used no-unused-vars 10:3 error \u0026#39;Unauthorized\u0026#39; is defined but never used no-unused-vars 11:3 error \u0026#39;Forbidden\u0026#39; is defined but never used no-unused-vars 12:3 error \u0026#39;NotFound\u0026#39; is defined but never used no-unused-vars 13:3 error \u0026#39;InternalServerError\u0026#39; is defined but never used no-unused-vars 14:3 error \u0026#39;NotImplemented\u0026#39; is defined but never used no-unused-vars 15:3 error \u0026#39;BadGateway\u0026#39; is defined but never used no-unused-vars /home/tgoshinski/work/lab/react/vite-redux-seed/src/@enums/ToastTypes.ts 1:6 error \u0026#39;ToastTypes\u0026#39; is defined but never used no-unused-vars 2:3 error \u0026#39;Error\u0026#39; is defined but never used no-unused-vars 3:3 error \u0026#39;Info\u0026#39; is defined but never used no-unused-vars 4:3 error \u0026#39;Success\u0026#39; is defined but never used no-unused-vars 5:3 error \u0026#39;Warning\u0026#39; is defined but never used no-unused-vars /home/tgoshinski/work/lab/react/vite-redux-seed/src/helpers/service.ts 23:17 error \u0026#39;RequestInit\u0026#39; is not defined no-undef ✖ 41 problems (41 errors, 0 warnings) error Command failed with exit code 1. info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command. ERROR: \u0026#34;lint:ts\u0026#34; exited with 1. error Command failed with exit code 1. info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command. Ouch, that is a lot of errors. One thing I see that I forgot was to extend the ESLint TypeScript plugin\u0026rsquo;s recommended:\nfile: .eslintrc.json { \u0026#34;root\u0026#34;: true, \u0026#34;env\u0026#34;: { \u0026#34;browser\u0026#34;: true, \u0026#34;node\u0026#34;: true }, \u0026#34;parser\u0026#34;: \u0026#34;@typescript-eslint/parser\u0026#34;, \u0026#34;parserOptions\u0026#34;: { \u0026#34;ecmaVersion\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;sourceType\u0026#34;: \u0026#34;module\u0026#34; }, \u0026#34;plugins\u0026#34;: [\u0026#34;@typescript-eslint\u0026#34;, \u0026#34;react\u0026#34;, \u0026#34;react-hooks\u0026#34;, \u0026#34;jsx-a11y\u0026#34;], \u0026#34;extends\u0026#34;: [ \u0026#34;eslint:recommended\u0026#34;, \u0026#34;plugin:react/recommended\u0026#34;, \u0026#34;plugin:react-hooks/recommended\u0026#34;, \u0026#34;plugin:jsx-a11y/recommended\u0026#34;, \u0026#34;plugin:@typescript-eslint/recommended\u0026#34;, \u0026#34;prettier\u0026#34; ], \u0026#34;rules\u0026#34;: { \u0026#34;no-magic-numbers\u0026#34;: [2, { \u0026#34;ignore\u0026#34;: [-1, 0, 1, 2, 10, 100, 1000] }], \u0026#34;no-unused-vars\u0026#34;: [2, { \u0026#34;vars\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;args\u0026#34;: \u0026#34;after-used\u0026#34;, \u0026#34;argsIgnorePattern\u0026#34;: \u0026#34;_\u0026#34; }], \u0026#34;no-console\u0026#34;: [ \u0026#34;error\u0026#34;, { \u0026#34;allow\u0026#34;: [\u0026#34;error\u0026#34;, \u0026#34;info\u0026#34;, \u0026#34;warn\u0026#34;] } ] }, \u0026#34;settings\u0026#34;: { \u0026#34;react\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;detect\u0026#34; } } }\nHooray - more errors, not less:\n/home/tgoshinski/work/lab/react/vite-redux-seed/src/@interfaces/IApiBaseResponse.ts 7:10 warning Unexpected any. Specify a different type @typescript-eslint/no-explicit-any /home/tgoshinski/work/lab/react/vite-redux-seed/src/helpers/service.ts 74:66 warning Unexpected any. Specify a different type @typescript-eslint/no-explicit-any ✖ 42 problems (40 errors, 2 warnings) Personally I choose to turn off no-explicit-any since I do find them useful in very limited circumstances. YMMV but I find that extraneous abuse of any is best called out in code reviews depending on the individual team norms. Next it seems that ESLint\u0026rsquo;s general no-unused-vars is overriding the TypeScript plugin\u0026rsquo;s no-unused-vars which is causing all of my enumerations to fail. We should be able to fix these with a couple of simple adjustments to our rules section:\nfile: .eslintrc.json { \u0026#34;root\u0026#34;: true, \u0026#34;env\u0026#34;: { \u0026#34;browser\u0026#34;: true, \u0026#34;node\u0026#34;: true }, \u0026#34;parser\u0026#34;: \u0026#34;@typescript-eslint/parser\u0026#34;, \u0026#34;parserOptions\u0026#34;: { \u0026#34;ecmaVersion\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;sourceType\u0026#34;: \u0026#34;module\u0026#34; }, \u0026#34;plugins\u0026#34;: [\u0026#34;@typescript-eslint\u0026#34;, \u0026#34;react\u0026#34;, \u0026#34;react-hooks\u0026#34;, \u0026#34;jsx-a11y\u0026#34;], \u0026#34;extends\u0026#34;: [ \u0026#34;eslint:recommended\u0026#34;, \u0026#34;plugin:react/recommended\u0026#34;, \u0026#34;plugin:react-hooks/recommended\u0026#34;, \u0026#34;plugin:jsx-a11y/recommended\u0026#34;, \u0026#34;plugin:@typescript-eslint/recommended\u0026#34;, \u0026#34;prettier\u0026#34; ], \u0026#34;rules\u0026#34;: { \u0026#34;no-magic-numbers\u0026#34;: [2, { \u0026#34;ignore\u0026#34;: [-1, 0, 1, 2, 10, 100, 1000] }], \u0026#34;no-unused-vars\u0026#34;: \u0026#34;off\u0026#34;, \u0026#34;no-console\u0026#34;: [ \u0026#34;error\u0026#34;, { \u0026#34;allow\u0026#34;: [\u0026#34;error\u0026#34;, \u0026#34;info\u0026#34;, \u0026#34;warn\u0026#34;] } ], \u0026#34;@typescript-eslint/no-explicit-any\u0026#34;: \u0026#34;off\u0026#34;, \u0026#34;@typescript-eslint/no-unused-vars\u0026#34;: [ 2, { \u0026#34;vars\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;args\u0026#34;: \u0026#34;after-used\u0026#34;, \u0026#34;argsIgnorePattern\u0026#34;: \u0026#34;_\u0026#34; } ] }, \u0026#34;settings\u0026#34;: { \u0026#34;react\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;detect\u0026#34; } } }\nOne more time:\n➜ vite-redux-seed (main) ✗ yarn lint yarn run v1.22.19 $ run-p lint:* $ stylelint \u0026#34;./src/**/*.scss\u0026#34; $ eslint ./src/**/**.ts* Done in 2.79s. All better.\n\u0026raquo; Fourth Commit\nEnd of Part One # Getting the application to run was not too difficult. It mostly involved reading a little documentation around Vite and around the ESLint settings that CRA hides with its custom plugins. Admittedly I am new to Vite so would appreciate any advice on something you think I could be doing better.\n","date":"31 October 2022","externalUrl":null,"permalink":"/posts/porting-cra-to-vite-1/","section":"Posts","summary":"As of this writing, Vite promises a faster and more performant developer experience over the tried-and-true Create React App template. This is my experience porting one of my vanilla projects to Vite.","title":"Porting a Create React App application to Vite Pt. 1: Base Project","type":"posts"},{"content":"","date":"22 October 2022","externalUrl":null,"permalink":"/categories/development/","section":"Categories","summary":"","title":"Development","type":"categories"},{"content":"","date":"22 October 2022","externalUrl":null,"permalink":"/tags/redux/","section":"Tags","summary":"","title":"Redux","type":"tags"},{"content":"Alerts tend to be for sticky messages that I want to ensure the user must actively engage and dismiss. Toasts, on the other hand, are used for quick, something-happened style messages - the information is there for the user to pay attention to, or not, as the message will disappear on its own in a few seconds.\nMVP # The process for showing toast messages is nearly identical to the alerts pipeline, so I am going to start off with a minimum-viable-product approach to verify the dispatch, show, and remove functionality.\nInterface # For this first pass I am just looking to display some text, and of course we will need a unique id for testing and state cleanup. I chose to name the interface IToastMessage over simply IToast as I have previously run into a naming collision with another package, so in this instance I chose to be ultra-specific.\nfile: /src/@interfaces/IToastMessage.ts interface IToastMessage { id: string; text?: string; } export default IToastMessage;\nSlice # We only need actions to display it, and remove it for now:\nfile: /src/store/slices/toasts.ts import { createSlice, PayloadAction } from \u0026#39;@reduxjs/toolkit\u0026#39;; import { v4 as uuid } from \u0026#39;uuid\u0026#39;; import IToastMessage from \u0026#39;../../@interfaces/IToastMessage\u0026#39;; import { IStore } from \u0026#39;../\u0026#39;; const initialState: Array\u0026lt;IToastMessage\u0026gt; = []; export const toasts = createSlice({ name: \u0026#39;toasts\u0026#39;, initialState, reducers: { removeToastMessage: (state: Array\u0026lt;IToastMessage\u0026gt;, action: PayloadAction\u0026lt;string\u0026gt;) =\u0026gt; { const index = state.findIndex(t =\u0026gt; t.id === action.payload); if (index \u0026gt; -1) { state.splice(index, 1); } }, addToastMessage: { reducer(state: Array\u0026lt;IToastMessage\u0026gt;, action: PayloadAction\u0026lt;IToastMessage\u0026gt;) { state.push(action.payload); }, prepare(text: string): any { return { payload: { id: uuid(), text } }; }, }, }, }); export const { addToastMessage, removeToastMessage } = toasts.actions; export const selectToasts = (state: IStore) =\u0026gt; state.toasts; export default toasts.reducer;\nToasts Container # The container is really simple since Bootstrap\u0026rsquo;s live example demonstrated a nice set of default classes to wrap a stack of toasts:\nfile: /src/components/app/AppToasts/AppToasts.tsx import React, { FC } from \u0026#39;react\u0026#39;; import { useAppSelector } from \u0026#39;../../../helpers\u0026#39;; import { selectToasts } from \u0026#39;../../../store/slices/toasts\u0026#39;; import Toast from \u0026#39;./AppToast\u0026#39;; const AppToasts: FC = () =\u0026gt; { const messages = useAppSelector(selectToasts); return ( \u0026lt;div className=\u0026#34;toast-container position-fixed bottom-0 end-0 p-3\u0026#34;\u0026gt; {messages.map(message =\u0026gt; ( \u0026lt;Toast key={message.id} toastMessage={message} /\u0026gt; ))} \u0026lt;/div\u0026gt; ); }; export default AppToasts;\nToast Component # Here we come to the primary difference between Bootstrap\u0026rsquo;s toasts and their alerts - toasts are exclusively opt-in so you need to explicitly invoke the show method for the component. Again just the bare minimum for the toast itself:\nfile: /src/components/app/AppToasts/Toast/Toast.tsx import React, { FC, useEffect, useRef } from \u0026#39;react\u0026#39;; import { Toast as BSToast } from \u0026#39;bootstrap\u0026#39;; import IToastMessage from \u0026#39;../../../../@interfaces/IToastMessage\u0026#39;; import { useAppDispatch } from \u0026#39;../../../../helpers\u0026#39;; import { removeToastMessage } from \u0026#39;../../../../store/slices/toasts\u0026#39;; export interface IAppToastProps { toastMessage: IToastMessage; } const Toast: FC\u0026lt;IAppToastProps\u0026gt; = ({ toastMessage }) =\u0026gt; { const ref = useRef\u0026lt;HTMLDivElement\u0026gt;(null); const dispatch = useAppDispatch(); useEffect(() =\u0026gt; { const handleClose = () =\u0026gt; { dispatch(removeToastMessage(toastMessage.id)); }; const el = ref.current; el!.addEventListener(\u0026#39;hide.bs.toast\u0026#39;, handleClose); // NOTE: unlike Alert, Toast is opt-in so you need to explicitly // initialize it here. const toast = new BSToast(el!); toast.show(); return () =\u0026gt; { el!.removeEventListener(\u0026#39;hide.bs.toast\u0026#39;, handleClose); }; // eslint-disable-next-line react-hooks/exhaustive-deps }, []); return ( \u0026lt;div ref={ref} className=\u0026#34;toast\u0026#34; role=\u0026#34;alert\u0026#34; aria-live=\u0026#34;assertive\u0026#34; aria-atomic=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;toast-header\u0026#34;\u0026gt; \u0026lt;strong className=\u0026#34;me-auto\u0026#34;\u0026gt;Alert\u0026lt;/strong\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; className=\u0026#34;btn-close\u0026#34; data-bs-dismiss=\u0026#34;toast\u0026#34; aria-label=\u0026#34;Close\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;toast-body\u0026#34;\u0026gt;{toastMessage.text}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); }; export default Toast;\nWe\u0026rsquo;ll tuck the container in beside the AppAlerts container in the startup component:\nfile: /src/index.tsx import { createRoot } from \u0026#39;react-dom/client\u0026#39;; import { RouterProvider } from \u0026#39;react-router-dom\u0026#39;; import { Provider } from \u0026#39;react-redux\u0026#39;; import \u0026#39;bootstrap\u0026#39;; import AppAlerts from \u0026#39;./components/app/AppAlerts\u0026#39;; import AppToasts from \u0026#39;./components/app/AppToasts\u0026#39;; import \u0026#39;./styles/global.scss\u0026#39;; import store from \u0026#39;./store\u0026#39;; import routes from \u0026#39;./routes\u0026#39;; createRoot(document.getElementById(\u0026#39;root\u0026#39;) as HTMLElement).render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;Provider store={store}\u0026gt; \u0026lt;AppAlerts /\u0026gt; \u0026lt;AppToasts /\u0026gt; \u0026lt;RouterProvider router={routes} /\u0026gt; \u0026lt;/Provider\u0026gt; \u0026lt;/React.StrictMode\u0026gt;, );\nTest Page # Let\u0026rsquo;s add a new button to our notifications test page so that we can verify everything works:\nfile: /src/index.tsx /* istanbul ignore file */ /* This is just an homely little demo page and is meant to be removed from a real project */ import React from \u0026#39;react\u0026#39;; import { useAppDispatch } from \u0026#39;../../helpers\u0026#39;; import { addErrorAlert, addInfoAlert, addSuccessAlert, addWarningAlert, } from \u0026#39;../../store/slices/alerts\u0026#39;; import { addToastMessage } from \u0026#39;../../store/slices/toasts\u0026#39;; const NotificationsDemo = () =\u0026gt; { const dispatch = useAppDispatch(); // alerts const handleInfoAlert = () =\u0026gt; dispatch(addInfoAlert({ title: \u0026#39;Optional Title\u0026#39;, text: \u0026#39;This is purely informational\u0026#39; })); const handleSuccessAlert = () =\u0026gt; dispatch(addSuccessAlert({ text: \u0026#39;very win, highly success\u0026#39; })); const handleWarningAlert = () =\u0026gt; dispatch(addWarningAlert({ text: \u0026#39;Turn back, beware of tigers\u0026#39; })); const handleErrorAlert = () =\u0026gt; dispatch(addErrorAlert({ text: \u0026#39;You have been eaten by a grue.\u0026#39; })); // toast const handleToast = () =\u0026gt; dispatch(addToastMessage(\u0026#39;Yay, something works!\u0026#39;)); return ( \u0026lt;\u0026gt; \u0026lt;div className=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;col-12\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;Alerts:\u0026lt;/h4\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;col-12\u0026#34;\u0026gt; \u0026lt;button onClick={handleInfoAlert} className=\u0026#34;btn btn-info me-3\u0026#34;\u0026gt; Info \u0026lt;/button\u0026gt; \u0026lt;button onClick={handleSuccessAlert} className=\u0026#34;btn btn-success me-3\u0026#34;\u0026gt; Success \u0026lt;/button\u0026gt; \u0026lt;button onClick={handleWarningAlert} className=\u0026#34;btn btn-warning me-3\u0026#34;\u0026gt; Warning \u0026lt;/button\u0026gt; \u0026lt;button onClick={handleErrorAlert} className=\u0026#34;btn btn-danger\u0026#34;\u0026gt; Error \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;col-12\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;Toasts\u0026lt;/h4\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;col-12\u0026#34;\u0026gt; \u0026lt;button onClick={handleToast} className=\u0026#34;btn btn-primary me-3\u0026#34;\u0026gt; Test \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; ); }; export default NotificationsDemo;\nTest Drive # After verifying that I have no linting errors it\u0026rsquo;s time to start the app and push our shiny new button. looks very MVP\nAfter a few seconds the removeToastMessage was dispatched automatically by the listener and we can see that the message has now been removed from the screen: current store\nvictory\nAdding Polish # I am going to type these similar to the the alerts, with Error, Info, Success, and Warning variants. I plan on leaving the header text non-configurable unless a client requests it.\nTyping # Even though I am using identical values to AlertTypes, this component has the greatest likelihood to sprout more variants as time goes on, so I feel it best to give the ToastMessage its own separate typing:\nfile: /src/@enums/ToastTypes enum ToastTypes { Error = \u0026#39;danger\u0026#39;, Info = \u0026#39;info\u0026#39;, Success = \u0026#39;success\u0026#39;, Warning = \u0026#39;warning\u0026#39;, } export default ToastTypes;\nfile: /src/@types/ToastType import ToastTypes from \u0026#39;../@enums/ToastTypes\u0026#39;; type ToastType = ToastTypes.Error | ToastTypes.Info | ToastTypes.Success | ToastTypes.Warning; export default ToastType;\nAdding the new type to the interface:\nfile: /src/@interfaces/IToastMessage.ts import ToastType from \u0026#39;../@types/ToastType\u0026#39;; interface IToastMessage { id: string; type?: ToastType; text?: string; } export default IToastMessage;\nSlice Changes # Add actions for our typed toast messages and create a helper method for preparing the payload:\nfile: /src/store/slices/toasts.ts import { createSlice, PayloadAction } from \u0026#39;@reduxjs/toolkit\u0026#39;; import { v4 as uuid } from \u0026#39;uuid\u0026#39;; import IToastMessage from \u0026#39;../../@interfaces/IToastMessage\u0026#39;; import ToastTypes from \u0026#39;../../@enums/ToastTypes\u0026#39;; import { IStore } from \u0026#39;../\u0026#39;; const initialState: Array\u0026lt;IToastMessage\u0026gt; = []; function createToastMessagePayload(toast: Partial\u0026lt;IToastMessage\u0026gt;): IToastMessage { return { ...toast, id: uuid(), }; } export const toasts = createSlice({ name: \u0026#39;toasts\u0026#39;, initialState, reducers: { removeToastMessage: (state: Array\u0026lt;IToastMessage\u0026gt;, action: PayloadAction\u0026lt;string\u0026gt;) =\u0026gt; { const index = state.findIndex(t =\u0026gt; t.id === action.payload); if (index \u0026gt; -1) { state.splice(index, 1); } }, addErrorToastMessage: { reducer(state: Array\u0026lt;IToastMessage\u0026gt;, action: PayloadAction\u0026lt;IToastMessage\u0026gt;) { state.push(action.payload); }, prepare(text: string): any { return { payload: createToastMessagePayload({ type: ToastTypes.Error, text }) }; }, }, addInfoToastMessage: { reducer(state: Array\u0026lt;IToastMessage\u0026gt;, action: PayloadAction\u0026lt;IToastMessage\u0026gt;) { state.push(action.payload); }, prepare(text: string): any { return { payload: createToastMessagePayload({ type: ToastTypes.Info, text }) }; }, }, addSuccessToastMessage: { reducer(state: Array\u0026lt;IToastMessage\u0026gt;, action: PayloadAction\u0026lt;IToastMessage\u0026gt;) { state.push(action.payload); }, prepare(text: string): any { return { payload: createToastMessagePayload({ type: ToastTypes.Success, text }) }; }, }, addWarningToastMessage: { reducer(state: Array\u0026lt;IToastMessage\u0026gt;, action: PayloadAction\u0026lt;IToastMessage\u0026gt;) { state.push(action.payload); }, prepare(text: string): any { return { payload: createToastMessagePayload({ type: ToastTypes.Warning, text }) }; }, }, }, }); export const { addErrorToastMessage, addInfoToastMessage, addSuccessToastMessage, addWarningToastMessage, removeToastMessage, } = toasts.actions; export const selectToasts = (state: IStore) =\u0026gt; state.toasts; export default toasts.reducer;\nToast Component Changes # Adding icons and appropriate tinting to the toast header really makes it \u0026ldquo;pop\u0026rdquo;:\nfile: /src/components/app/AppToasts/Toast/Toast.tsx import React, { FC, useEffect, useRef } from \u0026#39;react\u0026#39;; import { Toast as BSToast } from \u0026#39;bootstrap\u0026#39;; import { FontAwesomeIcon } from \u0026#39;@fortawesome/react-fontawesome\u0026#39;; import { faCircleCheck, faCircleInfo, faCircleXmark, faTriangleExclamation, IconDefinition, } from \u0026#39;@fortawesome/free-solid-svg-icons\u0026#39;; import ToastTypes from \u0026#39;../../../../@enums/ToastTypes\u0026#39;; import IToastMessage from \u0026#39;../../../../@interfaces/IToastMessage\u0026#39;; import { useAppDispatch } from \u0026#39;../../../../helpers\u0026#39;; import { removeToastMessage } from \u0026#39;../../../../store/slices/toasts\u0026#39;; export interface IAppToastProps { toastMessage: IToastMessage; } const Toast: FC\u0026lt;IAppToastProps\u0026gt; = ({ toastMessage }) =\u0026gt; { const ref = useRef\u0026lt;HTMLDivElement\u0026gt;(null); const dispatch = useAppDispatch(); let icon: IconDefinition; let headerText: string; // we will add our tint class to this based on type then just // `string.join` the array for the header\u0026#39;s \u0026#34;className\u0026#34; let headerClasses = [\u0026#39;toast-header\u0026#39;, \u0026#39; bg-opacity-25\u0026#39;]; useEffect(() =\u0026gt; { const handleClose = () =\u0026gt; { dispatch(removeToastMessage(toastMessage.id)); }; const el = ref.current; el!.addEventListener(\u0026#39;hidden.bs.toast\u0026#39;, handleClose); const toast = new BSToast(el!); toast.show(); return () =\u0026gt; { el!.removeEventListener(\u0026#39;hidden.bs.toast\u0026#39;, handleClose); }; // eslint-disable-next-line react-hooks/exhaustive-deps }, []); switch (toastMessage.type) { case ToastTypes.Error: icon = faCircleXmark; headerText = \u0026#39;Error\u0026#39;; headerClasses = [...headerClasses, \u0026#39;bg-danger\u0026#39;, \u0026#39;text-danger\u0026#39;]; break; case ToastTypes.Success: icon = faCircleCheck; headerText = \u0026#39;Success\u0026#39;; headerClasses = [...headerClasses, \u0026#39;bg-success\u0026#39;, \u0026#39;text-success\u0026#39;]; break; case ToastTypes.Warning: icon = faTriangleExclamation; headerText = \u0026#39;Warning\u0026#39;; headerClasses = [...headerClasses, \u0026#39;bg-warning\u0026#39;, \u0026#39;text-warning\u0026#39;]; break; default: icon = faCircleInfo; headerText = \u0026#39;Information\u0026#39;; headerClasses = [...headerClasses, \u0026#39;bg-info\u0026#39;, \u0026#39;text-primary\u0026#39;]; } return ( \u0026lt;div ref={ref} data-testid={`toast-${toastMessage.id}`} className=\u0026#34;toast\u0026#34; role=\u0026#34;alert\u0026#34; aria-live=\u0026#34;assertive\u0026#34; aria-atomic=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;div className={headerClasses.join(\u0026#39; \u0026#39;)}\u0026gt; \u0026lt;FontAwesomeIcon data-testid={`toast-${toastMessage.id}-icon`} className=\u0026#34;flex-shrink-0 me-2\u0026#34; icon={icon} /\u0026gt; \u0026lt;strong data-testid={`toast-${toastMessage.id}-header`} className=\u0026#34;me-auto\u0026#34;\u0026gt; {headerText} \u0026lt;/strong\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-testid={`toast-${toastMessage.id}-close`} className=\u0026#34;btn-close\u0026#34; data-bs-dismiss=\u0026#34;toast\u0026#34; aria-label=\u0026#34;Close\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div data-testid={`toast-${toastMessage.id}-body`} className=\u0026#34;toast-body\u0026#34;\u0026gt; {toastMessage.text} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); }; export default Toast;\nTest Page Changes # Add some new buttons for the new toast actions:\nfile: /src/pages/NotificationsDemo/NotificationsDemo.tsx /* istanbul ignore file */ /* This is just an homely little demo page and is meant to be removed from a real project */ import React from \u0026#39;react\u0026#39;; import { useAppDispatch } from \u0026#39;../../helpers\u0026#39;; import { addErrorAlert, addInfoAlert, addSuccessAlert, addWarningAlert, } from \u0026#39;../../store/slices/alerts\u0026#39;; import { addErrorToastMessage, addInfoToastMessage, addSuccessToastMessage, addWarningToastMessage, } from \u0026#39;../../store/slices/toasts\u0026#39;; const NotificationsDemo = () =\u0026gt; { const dispatch = useAppDispatch(); // alerts const handleInfoAlert = () =\u0026gt; dispatch(addInfoAlert({ title: \u0026#39;Optional Title\u0026#39;, text: \u0026#39;This is purely informational\u0026#39; })); const handleSuccessAlert = () =\u0026gt; dispatch(addSuccessAlert({ text: \u0026#39;very win, highly success\u0026#39; })); const handleWarningAlert = () =\u0026gt; dispatch(addWarningAlert({ text: \u0026#39;Turn back, beware of tigers\u0026#39; })); const handleErrorAlert = () =\u0026gt; dispatch(addErrorAlert({ text: \u0026#39;You have been eaten by a grue.\u0026#39; })); // toasts const handleInfoToast = () =\u0026gt; dispatch(addInfoToastMessage(\u0026#39;This is purely informational\u0026#39;)); const handleSuccessToast = () =\u0026gt; dispatch(addSuccessToastMessage(\u0026#39;You succeeded, give yourself a prize\u0026#39;)); const handleWarningToast = () =\u0026gt; dispatch(addWarningToastMessage(\u0026#39;Highway to the danger zone\u0026#39;)); const handleErrorToast = () =\u0026gt; dispatch(addErrorToastMessage(\u0026#39;The roof is on fire\u0026#39;)); return ( \u0026lt;\u0026gt; \u0026lt;div className=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;col-12\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;Alerts:\u0026lt;/h4\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;col-12\u0026#34;\u0026gt; \u0026lt;button onClick={handleInfoAlert} className=\u0026#34;btn btn-info me-3\u0026#34;\u0026gt; Info \u0026lt;/button\u0026gt; \u0026lt;button onClick={handleSuccessAlert} className=\u0026#34;btn btn-success me-3\u0026#34;\u0026gt; Success \u0026lt;/button\u0026gt; \u0026lt;button onClick={handleWarningAlert} className=\u0026#34;btn btn-warning me-3\u0026#34;\u0026gt; Warning \u0026lt;/button\u0026gt; \u0026lt;button onClick={handleErrorAlert} className=\u0026#34;btn btn-danger\u0026#34;\u0026gt; Error \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;col-12\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;Toasts\u0026lt;/h4\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;col-12\u0026#34;\u0026gt; \u0026lt;button onClick={handleInfoToast} className=\u0026#34;btn btn-info me-3\u0026#34;\u0026gt; Info \u0026lt;/button\u0026gt; \u0026lt;button onClick={handleSuccessToast} className=\u0026#34;btn btn-success me-3\u0026#34;\u0026gt; Success \u0026lt;/button\u0026gt; \u0026lt;button onClick={handleWarningToast} className=\u0026#34;btn btn-warning me-3\u0026#34;\u0026gt; Warning \u0026lt;/button\u0026gt; \u0026lt;button onClick={handleErrorToast} className=\u0026#34;btn btn-danger\u0026#34;\u0026gt; Error \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; ); }; export default NotificationsDemo;\nFinal Test # The page may be ugly, but the toasts look good! Yeah, Toast!\nConclusion # I am pretty happy with the results and feel this is good enough for a project starter. Team members on projects that I have added these pipelines to seem to like it, and the designers were not completely horrified. Unit tests will be in the repository if you would like some good code coverage to go with the sample code. As always feel free to drop me a line if you see anywhere that could use some improvement.\n","date":"22 October 2022","externalUrl":null,"permalink":"/posts/rx-notification-pipeline-2/","section":"Posts","summary":"\u003cp\u003e\u003ca href=\"https://getbootstrap.com/docs/5.2/components/alerts/\"title=\"Provide contextual feedback messages for typical user actions\" target=\"_blank\"\u003eAlerts\u003c/a\u003e tend to be for \u003cstrong\u003esticky\u003c/strong\u003e messages that I want to ensure the user must actively engage and dismiss.\n\u003ca href=\"https://getbootstrap.com/docs/5.2/components/toasts/\"title=\"Lightweight push notifications\" target=\"_blank\"\u003eToasts\u003c/a\u003e, on the other hand, are used for quick, \u003cstrong\u003e\u003cem\u003esomething-happened\u003c/em\u003e\u003c/strong\u003e style messages - the information is there\nfor the user to pay attention to, or not, as the message will disappear on its own in a few seconds.\u003c/p\u003e","title":"Redux Powered Notification Pipeline Pt. 2: Toasts","type":"posts"},{"content":"","date":"22 October 2022","externalUrl":null,"permalink":"/tags/typescript/","section":"Tags","summary":"","title":"TypeScript","type":"tags"},{"content":"","date":"22 October 2022","externalUrl":null,"permalink":"/categories/user-experience/","section":"Categories","summary":"","title":"User Experience","type":"categories"},{"content":"","date":"22 October 2022","externalUrl":null,"permalink":"/tags/ux/","section":"Tags","summary":"","title":"UX","type":"tags"},{"content":"Timely and relevant feedback from application events is critical to maintaining user engagement. Two standard ways of delivering immediate event feedback are through the use of alerts and toast messages. To avoid a lot of boilerplate markup popping up all over the project I wanted to make it as simple as just dispatching an action such as \u0026ldquo;dispatch(errorAlert('your call cannot be completed as dialed');\u0026rdquo; and have the alert appear on the screen. I am using Bootstrap for this project but the same concept should translate to other frameworks such as Ant Design, Material UI, or Foundation for Sites.\nWhat follows is a short replay of how I implemented an asynchronous alerts pipeline in my Redux template project , and one or more of the issues, and their subsequent solutions, I ran into during the process.\nImplementation # Bootstrap was added to the project via a global stylesheet:\nfile: /src/styles/global.scss @import \u0026#39;~bootstrap/scss/bootstrap\u0026#39;;\nand then included along with their JavaScript plugin in the project\u0026rsquo;s startup file:\nfile: /src/index.tsx import React from \u0026#39;react\u0026#39;; import { createRoot } from \u0026#39;react-dom/client\u0026#39;; import { RouterProvider } from \u0026#39;react-router-dom\u0026#39;; import { Provider } from \u0026#39;react-redux\u0026#39;; import \u0026#39;bootstrap\u0026#39;; import \u0026#39;./styles/global.scss\u0026#39;; import store from \u0026#39;./store\u0026#39;; import routes from \u0026#39;./routes\u0026#39;; createRoot(document.getElementById(\u0026#39;root\u0026#39;) as HTMLElement).render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;Provider store={store}\u0026gt; \u0026lt;RouterProvider router={routes} /\u0026gt; \u0026lt;/Provider\u0026gt; \u0026lt;/React.StrictMode\u0026gt; );\nAs we can see from their documentation there are several different styles of alert available from their framework that are powered by the addition of a custom class such as alert-success or alert-info. Typing # For this exercise I am only concerned with a specific subset of these, so I created an enumeration with an associated type that allows me to utilize their string-based names in a more type safe manner. This has an additional benefit of protecting me from any inevitable typos (i.e. btn-sucess btn-daanger etc.).\nfile: /src/@enums/AlertTypes.ts enum AlertTypes { Error = \u0026#39;danger\u0026#39;, Info = \u0026#39;info\u0026#39;, Success = \u0026#39;success\u0026#39;, Warning = \u0026#39;warning\u0026#39;, } export default AlertTypes;\nfile: /src/@types/AlertType.ts import AlertTypes from \u0026#39;../@enums/AlertTypes\u0026#39;; type AlertType = AlertTypes.Error | AlertTypes.Info | AlertTypes.Success | AlertTypes.Warning; export default AlertType;\nBefore we can begin to flesh out a slice for our alerts we need to decide the shape of the alert object that we will be placing in the store. The Bootstrap documentation shows some good examples of the kind of content you can put inside of a Bootstrap Alert, so for this first pass I am just going with the alert text, type, and an optional title:\nfile: /src/@interfaces/IAlert.ts import AlertType from \u0026#39;../@types/AlertType\u0026#39;; interface IAlert { type: AlertType; text: string; title?: string; } export default IAlert;\nSlice # For the slice I am thinking that we just need to hold and array of our IAlert shaped objects that can be picked up by a reactive component watching for changes to the store.alerts. Since we are actually adding to an array of alert messages I believe a more accurate action name should be dispatch(addErrorAlert(... as opposed to my initial thought of dispatch(errorAlert(... to better reflect how we are actually changing the store. Let\u0026rsquo;s start off with just two actions in order to assess the validity of this approach. This felt like a good first pass:\nfile: /src/store/slices/alerts.ts import { createSlice, PayloadAction } from \u0026#39;@reduxjs/toolkit\u0026#39;; import IAlert from \u0026#39;../../@interfaces/IAlert\u0026#39;; import AlertTypes from \u0026#39;../../@enums/AlertTypes\u0026#39;; import { IStore } from \u0026#39;../\u0026#39;; const initialState: Array\u0026lt;IAlert\u0026gt; = []; export const alerts = createSlice({ name: \u0026#39;alerts\u0026#39;, initialState, reducers: { addInfoAlert: (state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;IAlert\u0026gt;) =\u0026gt; { state.push({ ...action.payload, type: AlertTypes.Info, }); }, addSuccessAlert: (state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;IAlert\u0026gt;) =\u0026gt; { state.push({ ...action.payload, type: AlertTypes.Success }); }, }, }); export const { addInfoAlert, addSuccessAlert } = alerts.actions; export const selectAlerts = (state: IStore) =\u0026gt; state.alerts; export default alerts.reducer;\nContainer and Alert Components # Now we just need a functional container component to watch our store for new alerts:\nfile: /src/components/app/AppAlerts/AppAlerts.tsx import React, { FC } from \u0026#39;react\u0026#39;; import { useAppSelector } from \u0026#39;../../../helpers\u0026#39;; import { selectAlerts } from \u0026#39;../../../store/slices/alerts\u0026#39;; import styles from \u0026#39;./AppAlerts.module.scss\u0026#39;; import Alert from \u0026#39;./Alert\u0026#39;; import IAlert from \u0026#39;../../../@interfaces/IAlert\u0026#39;; const AppAlerts: FC = () =\u0026gt; { const alerts = useAppSelector(selectAlerts); return ( \u0026lt;div className={styles.wrapper}\u0026gt; \u0026lt;div className={styles.alertsCol}\u0026gt; {alerts.map((alert: IAlert, index: number) =\u0026gt; ( // yes `index` is a bit greasy, but give me a minute \u0026lt;Alert key={index} alert={alert} /\u0026gt; ))} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); }; export default AppAlerts;\nfile: /src/components/app/AppAlerts/Alert/Alert.tsx import React, { FC } from \u0026#39;react\u0026#39;; import IAlert from \u0026#39;../../../../@interfaces/IAlert\u0026#39;; export interface IAlertProps { alert: IAlert; } const Alert: FC\u0026lt;IAlertProps\u0026gt; = ({ alert }) =\u0026gt; { return ( \u0026lt;div className={`alert alert-${alert.type} alert-dismissible fade show d-flex align-items-center`} role=\u0026#34;alert\u0026#34;\u0026gt; \u0026lt;div\u0026gt; {alert.title ? \u0026lt;h5 className=\u0026#34;mb-0\u0026#34;\u0026gt;{alert.title}\u0026lt;/h5\u0026gt; : null} {alert.text} \u0026lt;/div\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; className=\u0026#34;btn-close\u0026#34; data-bs-dismiss=\u0026#34;alert\u0026#34; aria-label=\u0026#34;Close\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; export default Alert;\nSince we want this to be available from anywhere in the application I am going to put it next to our main RouteProvider.\nfile: /src/index.tsx import { createRoot } from \u0026#39;react-dom/client\u0026#39;; import { RouterProvider } from \u0026#39;react-router-dom\u0026#39;; import { Provider } from \u0026#39;react-redux\u0026#39;; import \u0026#39;bootstrap\u0026#39;; import AppAlerts from \u0026#39;./components/app/AppAlerts\u0026#39;; import \u0026#39;./styles/global.scss\u0026#39;; import store from \u0026#39;./store\u0026#39;; import routes from \u0026#39;./routes\u0026#39;; createRoot(document.getElementById(\u0026#39;root\u0026#39;) as HTMLElement).render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;Provider store={store}\u0026gt; \u0026lt;AppAlerts /\u0026gt; \u0026lt;RouterProvider router={routes} /\u0026gt; \u0026lt;/Provider\u0026gt; \u0026lt;/React.StrictMode\u0026gt;, );\nTest Page # And now an ugly little screen to test our logic:\nfile: /src/pages/NotificationsDemo/NotificationsDemo.tsx import React from \u0026#39;react\u0026#39;; import { useAppDispatch } from \u0026#39;../../helpers\u0026#39;; import { addInfoAlert, addSuccessAlert } from \u0026#39;../../store/slices/alerts\u0026#39;; const NotificationsDemo = () =\u0026gt; { const dispatch = useAppDispatch(); const handleInfoAlert = () =\u0026gt; dispatch(addInfoAlert({ title: \u0026#39;Optional Title\u0026#39;, text: \u0026#39;This is purely informational\u0026#39; })); const handleSuccessAlert = () =\u0026gt; dispatch(addSuccessAlert({ text: \u0026#39;very win, highly success\u0026#39; })); return ( \u0026lt;div className=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;col-12\u0026#34;\u0026gt; \u0026lt;button onClick={handleInfoAlert} className=\u0026#34;btn btn-info me-3\u0026#34;\u0026gt; Info \u0026lt;/button\u0026gt; \u0026lt;button onClick={handleSuccessAlert} className=\u0026#34;btn btn-success me-3\u0026#34;\u0026gt; Success \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); }; export default NotificationsDemo;\n\u0026hellip;and, our first error # my first error (today)\nThe excellent TypeScript linter has alerted me to a problem. The way that I have designed the actions they require the entire IAlert interface including the type. I was really hoping to abstract that implementation detail away from the developer so let\u0026rsquo;s see what can be done about that.\nThe solution was actually fairly easy. Redux Toolkit provides an optional prepare callback argument to allow you to do additional processing to the incoming action\u0026rsquo;s payload before passing it on to the actual reducer. Here I configure the action prepare method to accept a partial IAlert which we then fill in the missing AlertType field before passing the now complete IAlert to the reducer.\nfile: /src/store/slices/alerts.ts import { createSlice, PayloadAction } from \u0026#39;@reduxjs/toolkit\u0026#39;; import IAlert from \u0026#39;../../@interfaces/IAlert\u0026#39;; import AlertTypes from \u0026#39;../../@enums/AlertTypes\u0026#39;; import { IStore } from \u0026#39;../\u0026#39;; const initialState: Array\u0026lt;IAlert\u0026gt; = []; export const alerts = createSlice({ name: \u0026#39;alerts\u0026#39;, initialState, reducers: { addInfoAlert: { reducer(state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;IAlert\u0026gt;) { state.push(action.payload); }, prepare(alert: Partial\u0026lt;IAlert\u0026gt;): any { return { payload: { ...alert, type: AlertTypes.Info } }; }, }, addSuccessAlert: { reducer(state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;IAlert\u0026gt;) { state.push(action.payload); }, prepare(alert: Partial\u0026lt;IAlert\u0026gt;): any { return { payload: { ...alert, type: AlertTypes.Success } }; }, }, }, }); export const { addInfoAlert, addSuccessAlert } = alerts.actions; export const selectAlerts = (state: IStore) =\u0026gt; state.alerts; export default alerts.reducer;\nFirst Test Drive # ESLint is happy and we can now fire up the app and see what damage we have done. hooray!\nLooks like the components are accurately reflecting the current store: current store\nMost of us have experienced the feeling, right? Hecks YEAH!!1! \u0026hellip;oh, a second design flaw # Let\u0026rsquo;s click the close buttons to get rid of these before we take a victory lap - but what\u0026rsquo;s this? The state still contains our alerts that we closed. why are they still there?\nThe really bad thing is that the alerts functionality still works and will add new alerts and not display the old ones, but that still leaves state that is no longer relevant in our store. Of course this is not optimal so we need to fix it. bloated with stale information\nRemoving Stale Messages # We need to add a unique identifier for each alert so that we can easily locate it and remove it from state via a new action. Let\u0026rsquo;s add uuid to help with this: yarn add uuid yarn add --dev @types/uuid # or if you prefer npm i uuid npm i -D @types/uuid\nAdd an id property to our alert interface:\nfile: /src/@interfaces/IAlert.ts import AlertType from \u0026#39;../@types/AlertType\u0026#39;; interface IAlert { id: string; type: AlertType; text: string; title?: string; } export default IAlert;\nWe will generate the id and add it to the alert in the action\u0026rsquo;s prepare callback. Since this is starting to add some repetitive logic let us go ahead and pull the payload preparation logic out to a helper method.\nfile: /src/store/slices/alerts.ts import { createSlice, PayloadAction } from \u0026#39;@reduxjs/toolkit\u0026#39;; import { v4 as uuid } from \u0026#39;uuid\u0026#39;; import AlertTypes from \u0026#39;../../@enums/AlertTypes\u0026#39;; import AlertType from \u0026#39;../../@types/AlertType\u0026#39;; import IAlert from \u0026#39;../../@interfaces/IAlert\u0026#39;; import { IStore } from \u0026#39;../\u0026#39;; const initialState: Array\u0026lt;IAlert\u0026gt; = []; const createAlertPayload = (type: AlertType, alert: Partial\u0026lt;IAlert\u0026gt;): IAlert =\u0026gt; { return { ...alert, id: uuid(), type, }; }; export const alerts = createSlice({ name: \u0026#39;alerts\u0026#39;, initialState, reducers: { addInfoAlert: { reducer(state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;IAlert\u0026gt;) { state.push(action.payload); }, prepare(alert: Partial\u0026lt;IAlert\u0026gt;): any { return { payload: createAlertPayload(AlertTypes.Info, alert) }; }, }, addSuccessAlert: { reducer(state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;IAlert\u0026gt;) { state.push(action.payload); }, prepare(alert: Partial\u0026lt;IAlert\u0026gt;): any { return { payload: createAlertPayload(AlertTypes.Success, alert) }; }, }, }, }); export const { addInfoAlert, addSuccessAlert } = alerts.actions; export const selectAlerts = (state: IStore) =\u0026gt; state.alerts; export default alerts.reducer;\nBack in the slice let\u0026rsquo;s add an action to remove a specified alert from the array.\nfile: /src/store/slices/alerts.ts import { createSlice, PayloadAction } from \u0026#39;@reduxjs/toolkit\u0026#39;; import { v4 as uuid } from \u0026#39;uuid\u0026#39;; import AlertTypes from \u0026#39;../../@enums/AlertTypes\u0026#39;; import AlertType from \u0026#39;../../@types/AlertType\u0026#39;; import IAlert from \u0026#39;../../@interfaces/IAlert\u0026#39;; import { IStore } from \u0026#39;../\u0026#39;; const initialState: Array\u0026lt;IAlert\u0026gt; = []; const createAlertPayload = (type: AlertType, alert: Partial\u0026lt;IAlert\u0026gt;): IAlert =\u0026gt; { return { ...alert, id: uuid(), type, }; }; export const alerts = createSlice({ name: \u0026#39;alerts\u0026#39;, initialState, reducers: { removeAlert: (state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;string\u0026gt;) =\u0026gt; { const index = state.findIndex(a =\u0026gt; a.id === action.payload); if (index \u0026gt; -1) { state.splice(index, 1); } }, addInfoAlert: { reducer(state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;IAlert\u0026gt;) { state.push(action.payload); }, prepare(alert: Partial\u0026lt;IAlert\u0026gt;): any { return { payload: createAlertPayload(AlertTypes.Info, alert) }; }, }, addSuccessAlert: { reducer(state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;IAlert\u0026gt;) { state.push(action.payload); }, prepare(alert: Partial\u0026lt;IAlert\u0026gt;): any { return { payload: createAlertPayload(AlertTypes.Success, alert) }; }, }, }, }); // don\u0026#39;t forget to export the new action export const { addInfoAlert, addSuccessAlert, removeAlert } = alerts.actions; export const selectAlerts = (state: IStore) =\u0026gt; state.alerts; export default alerts.reducer;\nNow we can fix that greasy key in the alerts container:\nfile: /src/components/app/AppAlerts/AppAlerts.tsx import React, { FC } from \u0026#39;react\u0026#39;; import { useAppSelector } from \u0026#39;../../../helpers\u0026#39;; import { selectAlerts } from \u0026#39;../../../store/slices/alerts\u0026#39;; import styles from \u0026#39;./AppAlerts.module.scss\u0026#39;; import Alert from \u0026#39;./Alert\u0026#39;; import IAlert from \u0026#39;../../../@interfaces/IAlert\u0026#39;; const AppAlerts: FC = () =\u0026gt; { const alerts = useAppSelector(selectAlerts); return ( \u0026lt;div className={styles.wrapper}\u0026gt; \u0026lt;div className={styles.alertsCol}\u0026gt; {alerts.map((alert: IAlert, index: number) =\u0026gt; ( \u0026lt;Alert key={alert.id} alert={alert} /\u0026gt; ))} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); }; export default AppAlerts;\nSo now we know each alert will have its own unique identifier, and that we have an action to remove an alert object out of the state array using the identifier - the question arises where is the best place to actually dispatch the removeAlert action from? Back in the Bootstrap Alert documentation it shows a pair of events, close.bs.alert and closed.bs.alert that we could attach an event listener to. Initially I chose closed.bs.alert thinking that the component might unexpectedly disappear from the user\u0026rsquo;s screen while animations were still in progress. After running into intermittent errors I realized that I was causing errors while attempting to unbind an event listener from a div that Bootstrap had already destroyed. By switching the event listener to close.bs.alert it appears to give us enough time to unbind our listener without throwing DOMNode errors. To attach our listener to this exact alert instance we will need a reference to the div just created which we can obtain from the useRef hook. We can be certain that the ref.current is populated with the desired DOM reference by wrapping it inside a single-fire useEffect.\nfile: /src/components/app/AppAlerts/Alert/Alert.tsx import React, { FC, useEffect, useRef } from \u0026#39;react\u0026#39;; import IAlert from \u0026#39;../../../../@interfaces/IAlert\u0026#39;; import { removeAlert } from \u0026#39;../../../../store/slices/alerts\u0026#39;; import { useAppDispatch } from \u0026#39;../../../../helpers\u0026#39;; export interface IAlertProps { alert: IAlert; } const Alert: FC\u0026lt;IAlertProps\u0026gt; = ({ alert }) =\u0026gt; { const ref = useRef\u0026lt;HTMLDivElement\u0026gt;(null); const dispatch = useAppDispatch(); useEffect(() =\u0026gt; { // do not inline this so that we have a reference to use for subscribing and unsubscribing const handleClose = () =\u0026gt; { dispatch(removeAlert(alert.id)); }; // a reference to `this` exact Alert instance const el = ref.current; el!.addEventListener(\u0026#39;close.bs.alert\u0026#39;, handleClose); // to ensure that we do not leave a zombie process hanging around in memory // this method will fire when the component unmounts return () =\u0026gt; { el!.removeEventListener(\u0026#39;close.bs.alert\u0026#39;, handleClose); }; // eslint-disable-next-line react-hooks/exhaustive-deps }, []); return ( \u0026lt;div ref={ref} className={`alert alert-${alert.type} alert-dismissible fade show d-flex align-items-center`} role=\u0026#34;alert\u0026#34;\u0026gt; \u0026lt;div\u0026gt; {alert.title ? \u0026lt;h5 className=\u0026#34;mb-0\u0026#34;\u0026gt;{alert.title}\u0026lt;/h5\u0026gt; : null} {alert.text} \u0026lt;/div\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; className=\u0026#34;btn-close\u0026#34; data-bs-dismiss=\u0026#34;alert\u0026#34; aria-label=\u0026#34;Close\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; export default Alert;\nSecond Test Drive # This should be all of the moving pieces required to keep our state tidy. Clicking both buttons so we have a duplicate scenario to the first time through: same setup\nLet\u0026rsquo;s close the first info alert and check the state: it is gone!\nFinishing Touches # Now that we know everything works as intended we can implement the remaining actions missing from the alerts slice and call it day:\nfile: /src/store/slices/alerts.ts import { createSlice, PayloadAction } from \u0026#39;@reduxjs/toolkit\u0026#39;; import { v4 as uuid } from \u0026#39;uuid\u0026#39;; import AlertTypes from \u0026#39;../../@enums/AlertTypes\u0026#39;; import AlertType from \u0026#39;../../@types/AlertType\u0026#39;; import IAlert from \u0026#39;../../@interfaces/IAlert\u0026#39;; import { IStore } from \u0026#39;../\u0026#39;; const initialState: Array\u0026lt;IAlert\u0026gt; = []; const createAlertPayload = (type: AlertType, alert: Partial\u0026lt;IAlert\u0026gt;): IAlert =\u0026gt; { return { ...alert, id: uuid(), type, }; }; export const alerts = createSlice({ name: \u0026#39;alerts\u0026#39;, initialState, reducers: { removeAlert: (state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;string\u0026gt;) =\u0026gt; { const index = state.findIndex(a =\u0026gt; a.id === action.payload); if (index \u0026gt; -1) { state.splice(index, 1); } }, addErrorAlert: { reducer(state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;IAlert\u0026gt;) { state.push(action.payload); }, prepare(alert: Partial\u0026lt;IAlert\u0026gt;): any { return { payload: createAlertPayload(AlertTypes.Error, alert) }; }, }, addInfoAlert: { reducer(state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;IAlert\u0026gt;) { state.push(action.payload); }, prepare(alert: Partial\u0026lt;IAlert\u0026gt;): any { return { payload: createAlertPayload(AlertTypes.Info, alert) }; }, }, addSuccessAlert: { reducer(state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;IAlert\u0026gt;) { state.push(action.payload); }, prepare(alert: Partial\u0026lt;IAlert\u0026gt;): any { return { payload: createAlertPayload(AlertTypes.Success, alert) }; }, }, addWarningAlert: { reducer(state: Array\u0026lt;IAlert\u0026gt;, action: PayloadAction\u0026lt;IAlert\u0026gt;) { state.push(action.payload); }, prepare(alert: Partial\u0026lt;IAlert\u0026gt;): any { return { payload: createAlertPayload(AlertTypes.Warning, alert) }; }, }, }, }); export const { addErrorAlert, addInfoAlert, addSuccessAlert, addWarningAlert, removeAlert } = alerts.actions; export const selectAlerts = (state: IStore) =\u0026gt; state.alerts; export default alerts.reducer;\nBonus Round # It\u0026rsquo;s FLAIR TIME!\nWhile our alerts look nice why don\u0026rsquo;t we go the extra few feet and add some FontAwesome icons for a little flair. Here I am just taking what was shown in the docs and swapping in FontAwesome\u0026rsquo;s icons:\nfile: /src/components/app/AppAlerts/Alert/Alert.tsx import React, { FC, useEffect, useRef } from \u0026#39;react\u0026#39;; import { FontAwesomeIcon } from \u0026#39;@fortawesome/react-fontawesome\u0026#39;; import { IconDefinition } from \u0026#39;@fortawesome/free-regular-svg-icons\u0026#39;; import { faCircleCheck, faCircleInfo, faCircleQuestion, faCircleXmark, faTriangleExclamation, } from \u0026#39;@fortawesome/free-solid-svg-icons\u0026#39;; import IAlert from \u0026#39;../../../../@interfaces/IAlert\u0026#39;; import { removeAlert } from \u0026#39;../../../../store/slices/alerts\u0026#39;; import { useAppDispatch } from \u0026#39;../../../../helpers\u0026#39;; import AlertTypes from \u0026#39;../../../../@enums/AlertTypes\u0026#39;; export interface IAlertProps { alert: IAlert; } const Alert: FC\u0026lt;IAlertProps\u0026gt; = ({ alert }) =\u0026gt; { const ref = useRef\u0026lt;HTMLDivElement\u0026gt;(null); const dispatch = useAppDispatch(); useEffect(() =\u0026gt; { const handleClose = () =\u0026gt; { dispatch(removeAlert(alert.id)); }; const el = ref.current; el!.addEventListener(\u0026#39;close.bs.alert\u0026#39;, handleClose); return () =\u0026gt; { el!.removeEventListener(\u0026#39;close.bs.alert\u0026#39;, handleClose); }; // eslint-disable-next-line react-hooks/exhaustive-deps }, []); let icon: IconDefinition; switch (alert.type) { case AlertTypes.Error: icon = faCircleXmark; break; case AlertTypes.Success: icon = faCircleCheck; break; case AlertTypes.Warning: icon = faTriangleExclamation; break; case AlertTypes.Info: icon = faCircleInfo; break; default: icon = faCircleQuestion; } return ( \u0026lt;div ref={ref} data-testid={`alert-${alert.id}`} className={`alert alert-${alert.type} alert-dismissible fade show d-flex align-items-center`} role=\u0026#34;alert\u0026#34;\u0026gt; \u0026lt;FontAwesomeIcon className=\u0026#34;flex-shrink-0 me-2\u0026#34; icon={icon} /\u0026gt; \u0026lt;div\u0026gt; {alert.title ? \u0026lt;h5 className=\u0026#34;mb-0\u0026#34;\u0026gt;{alert.title}\u0026lt;/h5\u0026gt; : null} {alert.text} \u0026lt;/div\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; className=\u0026#34;btn-close\u0026#34; data-bs-dismiss=\u0026#34;alert\u0026#34; aria-label=\u0026#34;Close\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; export default Alert;\nI feel the icon adds a little extra polish for some miniscule extra effort: final result\nConclusion # I am going to wrap up this session by writing some unit tests around the new code which you will be able to see in the repository. I promise that part two, where we implement the toast\u0026rsquo;s pipeline, will be a lot shorter of an article. The process was nearly identical to developing alerts with a couple of minor twists which I will call out. As always feel free to drop me a line if you see anywhere that could use some improvement.\n","date":"19 October 2022","externalUrl":null,"permalink":"/posts/rx-notification-pipeline-1/","section":"Posts","summary":"\u003cp\u003eTimely and relevant feedback from application events is critical to maintaining user engagement. Two standard ways of\ndelivering immediate event feedback are through the use of \u003ca href=\"https://getbootstrap.com/docs/5.2/components/alerts/\"title=\"Provide contextual feedback messages for typical user actions\" target=\"_blank\"\u003ealerts\u003c/a\u003e and \u003ca href=\"https://getbootstrap.com/docs/5.2/components/toasts/\"title=\"Lightweight push notifications\" target=\"_blank\"\u003etoast messages\u003c/a\u003e. To avoid a lot of\nboilerplate markup popping up all over the project I wanted to make it as simple as just dispatching an action such as\n\u0026ldquo;\u003ccode\u003edispatch(errorAlert('your call cannot be completed as dialed');\u003c/code\u003e\u0026rdquo; and have the alert appear on the screen. I am using\n\u003ca href=\"https://getbootstrap.com/\"title=\"Powerful front-end toolkit\" target=\"_blank\"\u003eBootstrap\u003c/a\u003e for this project but the same concept should translate to other frameworks such as \u003ca href=\"https://ant.design/docs/react/introduce\"title=\"Popular UI toolkit\" target=\"_blank\"\u003eAnt Design\u003c/a\u003e,\n\u003ca href=\"https://mui.com/\"title=\"A comprehensive suite of UI tools to help you ship new features faster\" target=\"_blank\"\u003eMaterial UI\u003c/a\u003e, or \u003ca href=\"https://get.foundation/sites.html\"title=\"A wide range of modular and flexible components with an eye toward accessibility\" target=\"_blank\"\u003eFoundation for Sites\u003c/a\u003e.\u003c/p\u003e","title":"Redux Powered Notification Pipeline Pt. 1: Alerts","type":"posts"},{"content":"","date":"16 October 2022","externalUrl":null,"permalink":"/tags/api/","section":"Tags","summary":"","title":"API","type":"tags"},{"content":"","date":"16 October 2022","externalUrl":null,"permalink":"/tags/axios/","section":"Tags","summary":"","title":"Axios","type":"tags"},{"content":"","date":"16 October 2022","externalUrl":null,"permalink":"/tags/fetch/","section":"Tags","summary":"","title":"Fetch","type":"tags"},{"content":"","date":"16 October 2022","externalUrl":null,"permalink":"/tags/native-api/","section":"Tags","summary":"","title":"Native API","type":"tags"},{"content":"","date":"16 October 2022","externalUrl":null,"permalink":"/tags/optimization/","section":"Tags","summary":"","title":"Optimization","type":"tags"},{"content":"I have finally made the decision to let go of one of my favorite NPM packages, Axios, in favor of modern browsers' Fetch API. I want to be clear up front - I find nothing wrong with Axios, it is an extremely high quality package and a natural progression having used Angular\u0026rsquo;s http service that it was originally based upon. I will likely still rely on Axios in NodeJS projects, but times change and it now seems a bit redundant in front-end client applications.\nThere are really only a few factors that are prompting me to make this change:\nThere is no longer a need for me to support legacy browsers A need to get back exactly what was being sent by the server without any additional overhead No longer seeing the necessity of such a package on the client when the native browser API is more than sufficient Before # So here is a typical, albeit contrived, previous use of Axios in a front-end service on my Redux template project :\nfile: /src/services/user/UsersApi.ts import { AxiosResponse } from \u0026#39;axios\u0026#39;; import IUser from \u0026#39;../../@interfaces/IUser\u0026#39;; import { getAxiosInstance } from \u0026#39;../baseService\u0026#39;; import { unwrapServiceError } from \u0026#39;../../util/service\u0026#39;; axios.defaults.baseURL = \u0026#39;https://jsonplaceholder.typicode.com/\u0026#39;; export const fetchUsers = async (): Promise\u0026lt;Array\u0026lt;IUser\u0026gt;\u0026gt; =\u0026gt; { try { const axios = getAxiosInstance(); const response: AxiosResponse = await axios.get(\u0026#39;/users\u0026#39;); return response.data; } catch (e) { throw unwrapServiceError(\u0026#39;UsersApi.fetchUsers\u0026#39;, e); } };\nAlong with the factory method to create the Axios instance:\nfile: /src/services/baseService.ts import axios, { AxiosInstance, AxiosRequestConfig } from \u0026#39;axios\u0026#39;; import { config as appConfig } from \u0026#39;../config\u0026#39;; export const getAxiosInstance = (token?: string): AxiosInstance =\u0026gt; { const getConfig = (token?: string): AxiosRequestConfig =\u0026gt; { const config: AxiosRequestConfig = { baseURL: appConfig.apiUrl, headers: { \u0026#39;Cache-Control\u0026#39;: \u0026#39;no-cache\u0026#39;, \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, Pragma: \u0026#39;no-cache\u0026#39;, }, }; if (token) { config.headers.Authorization = `Bearer ${token}`; } return config; }; const config = getConfig(token); const instance = axios.create(config); // NOTE: Wire interceptors here. return instance; };\nAnd finally a utility I wrote to normalize Axios errors along with other types of framework errors:\nfile: /src/util/service.ts export const unwrapServiceError = (serviceMethod: string, error: any): AxiosError | Error =\u0026gt; { if (error.response) { // utilize more robust AxiosError const e = error as AxiosError; if (e.response!.status === HttpStatusCodes.BadRequest \u0026amp;\u0026amp; !e.response!.data?.message) { e.response!.data = e.response!.data || {}; e.response!.data.message = `${serviceMethod}: Not Found`; } return e; } return new Error(`${serviceMethod} error: ${error.message}`); };\nThis pattern and code nearly verbatim has served me well for many, many projects.\nThe Rewrite # My process for switching to the native Fetch API started with a visit to the MDN documentation pertaining to passing body, options, headers etc. to a fetch request. It was pretty obvious that it would not be too difficult of a process to create a helper method to do something similar to axios.create. I opted just to create the request body and explicitly pass it to fetch in the service so that it is clear that we are using the native API.\nfile: /src/helpers/service.ts import { ACCESS_ERROR, GENERIC_SERVICE_ERROR } from \u0026#39;../constants\u0026#39;; // for the demo this is in a `.env` file that Create-React-App is auto-wired to pick up const apiUri = process.env.REACT_APP_API_URI; function createRequest(method: FetchRequestType) { return (url: string, body?: any, token?: string): Request =\u0026gt; { const headers: Headers = new Headers({ \u0026#39;Cache-Control\u0026#39;: \u0026#39;no-cache\u0026#39;, Pragma: \u0026#39;no-cache\u0026#39;, }); if (body) { headers.append(\u0026#39;Content-Type\u0026#39;, \u0026#39;application/json\u0026#39;); } if (token) { headers.append(\u0026#39;Authorization\u0026#39;, `Bearer ${token}`); } const init: RequestInit = { method, mode: \u0026#39;cors\u0026#39;, cache: \u0026#39;no-cache\u0026#39;, headers, }; if (token) { init.credentials = \u0026#39;include\u0026#39;; } if (body) { init.body = JSON.stringify(body); } return new Request(`${apiUri}${url}`, init); }; }\nMaybe a little more verbose, but I opted for clarity when naming my exported helper functions:\nfile: /src/helpers/service.ts export const createGetRequest = createRequest(FetchMethods.Get); export const createPatchRequest = createRequest(FetchMethods.Patch); export const createPostRequest = createRequest(FetchMethods.Post); export const createPutRequest = createRequest(FetchMethods.Put); export const createDeleteRequest = createRequest(FetchMethods.Delete);\nSince there is a lot of repetitive boilerplate around processing a fetch response I opted for another helper method and decided that it was a good place to take advantage of TypeScript\u0026rsquo;s generics for stronger typing when processing the response\u0026rsquo;s payload. Since I have run into API\u0026rsquo;s that return compound responses, similar to an AxiosResponse with the payload coming in a data field, I check for those here so I can dig the value I am looking for seamlessly out of the payload. This is probably a good spot for fine-tuning to your specific needs.\nfile: /src/helpers/service.ts export async function processApiResponse\u0026lt;Type\u0026gt;(response: Response): Promise\u0026lt;Type\u0026gt; { if (response.ok) { const payload = await response.json(); // see if we have a compound API response if (payload.status \u0026amp;\u0026amp; (payload.data || payload.errors)) { if (!payload.success) { throw payload; } return payload.data as Type; } return payload as Type; } if ( response.status === HttpStatusCodes.Unauthorized || response.status === HttpStatusCodes.Forbidden ) { throw new Error(ACCESS_ERROR); } throw new Error(GENERIC_SERVICE_ERROR); }\nAs we are no longer dealing with a potential AxiosError body the error processor gets more than a little slimmer:\nfile: /src/helpers/service.ts export const unwrapServiceError = (serviceMethod: string, error: any): Error =\u0026gt; { return new Error( `${serviceMethod} error: ${error.errors ? error.errors[0] : error.message}` ); };\nResult # Putting it all together I feel that it makes my service functions a bit more streamlined and easier to read:\nfile: /src/services/user/UsersApi.ts import IUser from \u0026#39;../../@interfaces/IUser\u0026#39;; import { createGetRequest, processApiResponse, unwrapServiceError } from \u0026#39;../../helpers\u0026#39;; export const fetchUsers = async (): Promise\u0026lt;Array\u0026lt;IUser\u0026gt;\u0026gt; =\u0026gt; { try { const response = await fetch(createGetRequest(\u0026#39;/users\u0026#39;)); return await processApiResponse\u0026lt;Array\u0026lt;IUser\u0026gt;\u0026gt;(response); } catch (e) { throw unwrapServiceError(\u0026#39;UsersApi.fetchUsers\u0026#39;, e); } };\nAs always feel free to drop me a line if you see anything you feel could be improved. Thank you for dropping by. Reference Project\n","date":"16 October 2022","externalUrl":null,"permalink":"/posts/switching-to-fetch-api/","section":"Posts","summary":"\u003cp\u003eI have finally made the decision to let go of one of my favorite NPM packages, \u003ca href=\"https://axios-http.com/\"title=\"Promise based HTTP client for the browser and node.js\" target=\"_blank\"\u003eAxios\u003c/a\u003e, in favor of modern browsers'\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\"title=\"The Fetch API provides an interface for fetching resources\" target=\"_blank\"\u003eFetch API\u003c/a\u003e. I want to be clear up front - \u003cstrong\u003eI find nothing wrong with Axios\u003c/strong\u003e, it is an extremely high quality\npackage and a natural progression having used \u003ca href=\"https://angular.io/\"title=\"Modern web developer\u0026#39;s platform\" target=\"_blank\"\u003eAngular\u003c/a\u003e\u0026rsquo;s http service that it was originally based upon. I will\nlikely still rely on Axios in \u003ca href=\"https://nodejs.org/en/\"title=\"Open-source, cross-platform JavaScript runtime environment\" target=\"_blank\"\u003eNodeJS\u003c/a\u003e projects, but times change and it now seems a bit redundant in front-end\nclient applications.\u003c/p\u003e","title":"Switching to Fetch API","type":"posts"},{"content":"","date":"10 October 2022","externalUrl":null,"permalink":"/tags/opinion/","section":"Tags","summary":"","title":"Opinion","type":"tags"},{"content":"TL:DR I generally have some variation of this set of folders that I add to all of my TypeScript projects:\nsrc/ ├── @enums/ \u0026lt;- project-wide Enumerations │ ├── AsyncStates.ts \u0026lt;- (described below) │ └── HttpStatusCodes.ts \u0026lt;- (described below) ├── @interfaces/ \u0026lt;- project-wide Interfaces ├── @mocks/ \u0026lt;- mocks used in local dev and tests └── @types/ \u0026lt;- project-wide Types └── AsyncStatus.ts \u0026lt;- (described below) As a longtime JavaScript developer I admit that it took me a long while to warm up to TypeScript. However, after fully embracing TypeScript the one thing that still irritated me was a seemingly growing amount of non-JavaScript related files bloating up my project folders - ie. the superset part of TypeScript: types, interfaces, and enumerations. When I am looking at a folder with more than six (6) *.ts files it is nice to know that I am looking at app logic and/or unit tests.\nI believe the first time I noticed an at folder it was something along the lines of @models in one of the company\u0026rsquo;s architects seed projects. I thought the @ prefix was a novel idea being legal in JavaScript/TypeScript and it really called out to me that this was a special folder. At the time our stable team was working on a really interface-heavy React front-end and some of the service and component folders were growing quite large with bespoke interfaces and types mixed in with the business logic and (too few) unit tests.\nOne weekend I decided to create a spike branch and move as many of the interfaces and types as I could into @types and @interfaces folders. Not only did it declutter some service and component folders I also managed to find a couple of places we had duplicates and more than one error. This pattern proved to be very popular with the team and we expanded the idea to include an @enumerations folder to house some enumerations we had created to lend meaning to some of the magic numbers and string values peppered around the project. After a few years using this pattern I have not had a team yet that disliked, or really had any problem with it.\nSome more detail and examples of my reasoning follows.\n@enums (or @enumerations) # Here we give meaning to groups of numbers or strings, say your backend had a numeric field AddressType - what does that 1 in the field really mean? By creating an AddressTypes enumeration we no longer have to remember 3 means \u0026ldquo;Business\u0026rdquo; or that 5 stands for \u0026ldquo;Cabin by the Lake\u0026rdquo;. For a real-world example this particular enumeration helps me keep a lot of magic numbers out of my React front-ends and NodeJS backends:\n@enums/HttpStatusCodes.ts /* eslint-disable no-magic-numbers */ enum HttpStatusCodes { Ok = 200, Created, Accepted, NoContent = 204, MovedPermanently = 301, Redirect = 302, BadRequest = 400, Unauthorized, Forbidden = 403, NotFound, InternalServerError = 500, NotImplemented, BadGateway, } export default HttpStatusCodes;\n@interfaces # The majority of the interface definitions I put here describe the DTO\u0026rsquo;s coming from my services. Since I come from a C# background I like to preface all of my interface names with \u0026ldquo;I\u0026rdquo;, as in IUsersResponse, IWidget, etc. - I find that it helps me differentiate interfaces at a glance from types or classes.\nexample: export default interface IUser { id: number; name: string; username: string; address: { street: string; suite: string; city: string; zipcode: string; geo: { lat: number; lng: number; }; }; phone: string; website: string; company: { name: string; catchPhrase: string; bs: string; }; }\n@types # Really just what it says, types that apply project wide. I feel the best example is a combination of an enumeration and type that I find handy when creating Redux Toolkit slices that utilize thunks:\n@types/AsyncStatus.ts import AsyncStates from \u0026#39;../@enums/AsyncStates\u0026#39;; type AsyncStatus = | AsyncStates.Idle | AsyncStates.Pending | AsyncStates.Success | AsyncStates.Fail; export default AsyncStatus;\n@enums/AsyncStates.ts enum AsyncStates { Idle = \u0026#39;IDLE\u0026#39;, Pending = \u0026#39;PENDING\u0026#39;, Success = \u0026#39;SUCCESS\u0026#39;, Fail = \u0026#39;FAIL\u0026#39;, } export default AsyncStates;\nWork together like so to better describe the intent of the values being used:\nstore/slices/user.ts import { fetchUsers } from \u0026#39;../../services/user/UsersApi\u0026#39;; // NOTE: not all interfaces end up in the global folder if they make // more sense at a granular level export interface IUserSlice { current: IUser | null; users: Array\u0026lt;IUser\u0026gt;; status: AsyncStatus; error: string | null; } export const initialState: IUserSlice = { current: null, users: [], status: AsyncStates.Idle, error: null, }; export const user = createSlice({ name: \u0026#39;user\u0026#39;, initialState, reducers: { clearCurrentUser: (state: IUserSlice) =\u0026gt; { state.current = null; }, setCurrentUser: (state: IUserSlice, action: { type: string; payload: number }) =\u0026gt; { const user = state.users.find(x =\u0026gt; x.id === action.payload); if (user) { state.current = user; state.error = null; } else { state.current = null; state.error = \u0026#39;user not found\u0026#39;; } }, }, extraReducers: builder =\u0026gt; { builder.addCase(loadUsers.pending, (state: IUserSlice) =\u0026gt; { state.status = AsyncStates.Pending; }); builder.addCase( loadUsers.fulfilled, (state: IUserSlice, { payload }: PayloadAction\u0026lt;Array\u0026lt;IUser\u0026gt; | undefined\u0026gt;) =\u0026gt; { state.status = AsyncStates.Success; state.users = payload ? (payload as Array\u0026lt;IUser\u0026gt;) : []; // or you could make it an additive operation // state.users = [...state.users, ...(action.payload as Array\u0026lt;IUser\u0026gt;)]; }, ); builder.addCase(loadUsers.rejected, (state: IUserSlice, action: any) =\u0026gt; { state.status = AsyncStates.Fail; state.error = action.payload as string; state.users = []; }); }, });\nBonus: @mocks # Since some of the response signatures from the services can be quite complex we found it convenient to collect all of our mocks in a single location to be easily reused across multiple unit tests. It is also handy for the rest of the team to not have to reinvent the wheel each time they are writing new code relating to the previously mocked values.\nAnother bonus that came out of creating these mocks is we found that it allowed us to develop service and component code in parallel with the backend. The front-end developer collaborates with the backend dev to get the proposed shape of the DTO that will come out of the API. From there it is simply a matter of defining the interface for said data and developing a mock return value in the @mocks directory. To simulate the interaction for your application you can pipe mocked values through the service code until the backend is ready for you to pull the live version. And triple-bonus you now have valid mocks for all unit tests around the service consumption.\nexample: import IBlock from \u0026#39;../@interfaces/IBlock\u0026#39;; const mockChain: Array\u0026lt;IBlock\u0026gt; = [ { timestamp: 1, lastHash: \u0026#39;-----\u0026#39;, hash: \u0026#39;=====\u0026#39;, data: [], difficulty: 3, nonce: 0, }, { timestamp: 1664912323208, lastHash: \u0026#39;=====\u0026#39;, hash: \u0026#39;12d331b40d8ef653827c9e43502c3ee73232038be01937f1cd8328fe699a85a8\u0026#39;, data: [\u0026#39;lookit\u0026#39;, \u0026#39;da\u0026#39;, \u0026#39;birdie\u0026#39;], difficulty: 2, nonce: 8, }, { timestamp: 1664912364866, lastHash: \u0026#39;12d331b40d8ef653827c9e43502c3ee73232038be01937f1cd8328fe699a85a8\u0026#39;, hash: \u0026#39;458059ca76b703b0be6d7f30b80fb44ad3b8436348032f59efcf5056930b2b38\u0026#39;, data: [\u0026#39;data\u0026#39;, \u0026#34;come\u0026#39;n\u0026#34;, \u0026#34;get\u0026#39;ur\u0026#34;, \u0026#39;data\u0026#39;], difficulty: 1, nonce: 1, }, { timestamp: 1664912386011, lastHash: \u0026#39;458059ca76b703b0be6d7f30b80fb44ad3b8436348032f59efcf5056930b2b38\u0026#39;, hash: \u0026#39;15c3351282a1c3a5744e101c005243a3df0b9ce781c3a76d55f850c28fd3dbdd\u0026#39;, data: [\u0026#39;why\u0026#39;, \u0026#39;not\u0026#39;, \u0026#39;both?\u0026#39;], difficulty: 1, nonce: 2, }, { timestamp: 1664912416611, lastHash: \u0026#39;15c3351282a1c3a5744e101c005243a3df0b9ce781c3a76d55f850c28fd3dbdd\u0026#39;, hash: \u0026#39;2f0211da93f4ef426f4588c1ba36db5cdbc6802e8ef8156494f9507af253da74\u0026#39;, data: [\u0026#39;not\u0026#39;, \u0026#39;your\u0026#39;, \u0026#39;friend\u0026#39;, \u0026#39;buddy\u0026#39;], difficulty: 1, nonce: 4, }, { timestamp: 1664912432611, lastHash: \u0026#39;2f0211da93f4ef426f4588c1ba36db5cdbc6802e8ef8156494f9507af253da74\u0026#39;, hash: \u0026#39;12e5596c6f124fc0989a2f61cc79b48b5e16a8ce5abfb43ad47d8a531c406d1f\u0026#39;, data: [\u0026#39;not\u0026#39;, \u0026#39;your\u0026#39;, \u0026#39;buddy\u0026#39;, \u0026#39;amigo\u0026#39;], difficulty: 1, nonce: 1, }, ]; export default mockChain;\nin use: import mockChain from \u0026#39;../../../@mocks/blockchain\u0026#39;; import * as chainApi from \u0026#39;../../services/ChainApi\u0026#39;; jest.mock(\u0026#39;../../services/ChainApi\u0026#39;); describe(\u0026#39;components / App\u0026#39;, () =\u0026gt; { it(\u0026#39;should match the snapshot\u0026#39;, async () =\u0026gt; { (chainApi.fetchBlocks as jest.Mock).mockResolvedValueOnce(mockChain); const component = render(\u0026lt;App /\u0026gt;); expect(component.container.firstChild).toMatchSnapshot(); }); });\nWhich may also be easily reused in the negative test:\n// just making something up here as the BlockChain class // itself actually prevents tampered chains const badChain = [...mockChain]; badChain[1].lastHash = \u0026#39;1am4b4dh4xx0r\u0026#39;; (chainApi.fetchBlocks as jest.Mock).mockResolvedValueOnce(badChain); I hope that maybe this can help some of you reduce the cognitive load of your larger TypeScript projects. If you have a variation of this that works even better feel free to drop me a line, I would be grateful to hear about it. Huge thanks go to former co-worker and amazing front-end architect Brian Olson for forcing me to use TypeScript until I learned to enjoy it.\nmy average project root ","date":"10 October 2022","externalUrl":null,"permalink":"/posts/organization-with-ts-at-directories/","section":"Posts","summary":"A set of specialty folders I utilize in TypeScript projects to better organize language specific concepts.","title":"TypeScript: Organization with `@` Directories","type":"posts"},{"content":"I have a minor peeve, maybe it\u0026rsquo;s just me, but I really dislike random chunks of configuration cluttering up my package.json file. Project generators offered by the likes of Nest and Create React App still leverage the classic pattern of embedding third party configuration values in the package.json, which makes it feel cluttered to me. Really I am just looking to see the dependencies, development dependencies, NPM scripts, and basic project metadata in that file.\nTo illustrate I have just spun up a fresh React project with Create React App and found a configuration section for ESLint and one for Browserslist:\n{ \u0026#34;name\u0026#34;: \u0026#34;whats-new\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;react-scripts test\u0026#34;, \u0026#34;eject\u0026#34;: \u0026#34;react-scripts eject\u0026#34; }, \u0026#34;eslintConfig\u0026#34;: { \u0026#34;extends\u0026#34;: [ \u0026#34;react-app\u0026#34;, \u0026#34;react-app/jest\u0026#34; ] }, \u0026#34;browserslist\u0026#34;: { \u0026#34;production\u0026#34;: [ \u0026#34;\u0026gt;0.2%\u0026#34;, \u0026#34;not dead\u0026#34;, \u0026#34;not op_mini all\u0026#34; ], \u0026#34;development\u0026#34;: [ \u0026#34;last 1 chrome version\u0026#34;, \u0026#34;last 1 firefox version\u0026#34;, \u0026#34;last 1 safari version\u0026#34; ] }, \u0026#34;dependencies\u0026#34;: { \u0026#34;@testing-library/jest-dom\u0026#34;: \u0026#34;^5.14.1\u0026#34;, \u0026#34;@testing-library/react\u0026#34;: \u0026#34;^13.0.0\u0026#34;, \u0026#34;@testing-library/user-event\u0026#34;: \u0026#34;^13.2.1\u0026#34;, \u0026#34;@types/jest\u0026#34;: \u0026#34;^27.0.1\u0026#34;, \u0026#34;@types/node\u0026#34;: \u0026#34;^16.7.13\u0026#34;, \u0026#34;@types/react\u0026#34;: \u0026#34;^18.0.0\u0026#34;, \u0026#34;@types/react-dom\u0026#34;: \u0026#34;^18.0.0\u0026#34;, \u0026#34;react\u0026#34;: \u0026#34;^18.2.0\u0026#34;, \u0026#34;react-dom\u0026#34;: \u0026#34;^18.2.0\u0026#34;, \u0026#34;react-scripts\u0026#34;: \u0026#34;5.0.1\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;^4.4.2\u0026#34;, \u0026#34;web-vitals\u0026#34;: \u0026#34;^2.1.0\u0026#34; } } Most are aware by now that the ESLint configuration can be split out into its own configuration file like so:\n.eslintrc.json { \u0026#34;extends\u0026#34;: [ \u0026#34;react-app\u0026#34;, \u0026#34;react-app/jest\u0026#34; ] }\nwhich, to be fair, does not look like it buys you much. However this is completely barebones before you decided to wire in your testing framework, ensure accessibility, define project coding standards, etc.\nAll of the new config values in this .eslintrc.json would have been a lot of excess content weighing the package.json down distracting from the content you are actually looking to see there. { \u0026#34;root\u0026#34;: true, \u0026#34;parser\u0026#34;: \u0026#34;@typescript-eslint/parser\u0026#34;, \u0026#34;parserOptions\u0026#34;: { \u0026#34;ecmaVersion\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;sourceType\u0026#34;: \u0026#34;module\u0026#34; }, \u0026#34;env\u0026#34;: { \u0026#34;browser\u0026#34;: true, \u0026#34;es2021\u0026#34;: true, \u0026#34;jest/globals\u0026#34;: true, \u0026#34;node\u0026#34;: true }, \u0026#34;extends\u0026#34;: [ \u0026#34;eslint:recommended\u0026#34;, \u0026#34;plugin:@typescript-eslint/eslint-recommended\u0026#34;, \u0026#34;plugin:@typescript-eslint/recommended\u0026#34;, \u0026#34;plugin:prettier/recommended\u0026#34;, \u0026#34;plugin:react/recommended\u0026#34;, \u0026#34;plugin:jest/recommended\u0026#34;, \u0026#34;plugin:jsx-a11y/recommended\u0026#34; ], \u0026#34;overrides\u0026#34;: [ { \u0026#34;files\u0026#34;: [\u0026#34;*.ts\u0026#34;, \u0026#34;*.tsx\u0026#34;], \u0026#34;rules\u0026#34;: { \u0026#34;@typescript-eslint/no-unused-vars\u0026#34;: [2, { \u0026#34;args\u0026#34;: \u0026#34;none\u0026#34; }] } } ], \u0026#34;plugins\u0026#34;: [\u0026#34;@typescript-eslint\u0026#34;, \u0026#34;react\u0026#34;, \u0026#34;react-hooks\u0026#34;, \u0026#34;jest\u0026#34;, \u0026#34;jsx-a11y\u0026#34;], \u0026#34;rules\u0026#34;: { \u0026#34;react/self-closing-comp\u0026#34;: [ \u0026#34;error\u0026#34;, { \u0026#34;component\u0026#34;: true, \u0026#34;html\u0026#34;: true } ], \u0026#34;react/no-array-index-key\u0026#34;: 2, \u0026#34;react/no-danger\u0026#34;: 1, \u0026#34;react/no-deprecated\u0026#34;: 2, \u0026#34;react/no-did-mount-set-state\u0026#34;: 1, \u0026#34;react/no-did-update-set-state\u0026#34;: 1, \u0026#34;react/no-direct-mutation-state\u0026#34;: 2, \u0026#34;react/no-find-dom-node\u0026#34;: 1, \u0026#34;react/no-is-mounted\u0026#34;: 1, \u0026#34;react/no-multi-comp\u0026#34;: 2, \u0026#34;react/no-redundant-should-component-update\u0026#34;: 2, \u0026#34;react/no-render-return-value\u0026#34;: 2, \u0026#34;react/no-typos\u0026#34;: 1, \u0026#34;react/react-in-jsx-scope\u0026#34;: 1, \u0026#34;react/jsx-handler-names\u0026#34;: \u0026#34;off\u0026#34;, \u0026#34;react/jsx-no-duplicate-props\u0026#34;: 2, \u0026#34;react/jsx-fragments\u0026#34;: 2, \u0026#34;react/jsx-pascal-case\u0026#34;: 2, \u0026#34;react/jsx-boolean-value\u0026#34;: 2, \u0026#34;no-unused-vars\u0026#34;: [2, { \u0026#34;vars\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;args\u0026#34;: \u0026#34;after-used\u0026#34;, \u0026#34;argsIgnorePattern\u0026#34;: \u0026#34;_\u0026#34; }], \u0026#34;no-magic-numbers\u0026#34;: [2, { \u0026#34;ignore\u0026#34;: [-1, 0, 1, 2, 10, 100, 3000, 3001] }], \u0026#34;react-hooks/exhaustive-deps\u0026#34;: \u0026#34;warn\u0026#34;, \u0026#34;react-hooks/rules-of-hooks\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;no-prototype-builtins\u0026#34;: \u0026#34;off\u0026#34;, \u0026#34;no-console\u0026#34;: [ \u0026#34;error\u0026#34;, { \u0026#34;allow\u0026#34;: [\u0026#34;error\u0026#34;, \u0026#34;info\u0026#34;, \u0026#34;warn\u0026#34;] } ] }, \u0026#34;settings\u0026#34;: { \u0026#34;react\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;detect\u0026#34; } } }\nIf you were not aware the Browserslist settings can also be broken out into a separate file\n.browserslistrc [production] \u0026gt; 0.25% not dead not op_mini all [development] last 1 chrome version last 1 firefox version last 1 safari version\nLikewise Nest tends to put Jest configuration in the package.json while it can just as easily go into its own JavaScript file. Note: As far as I can tell Create React App powered projects will not recognize Jest settings outside of the package.json, but here is a working example from one of my NodeJS projects:\njest.config.js module.exports = { testRegex: \u0026#39;.*\\\\.test\\\\.tsx?$\u0026#39;, transform: { \u0026#39;^.+\\\\.(t|j)sx?$\u0026#39;: \u0026#39;ts-jest\u0026#39;, }, setupFilesAfterEnv: [\u0026#39;./setupTests.ts\u0026#39;], collectCoverage: true, collectCoverageFrom: [ \u0026#39;**/*.{js,ts,tsx}\u0026#39;, \u0026#39;!src/api/**\u0026#39;, \u0026#39;!coverage/**\u0026#39;, \u0026#39;!data-scripts/**\u0026#39;, \u0026#39;!node_modules/**\u0026#39;, \u0026#39;!**/@enums/**\u0026#39;, \u0026#39;!**/@interfaces/**\u0026#39;, \u0026#39;!**/@mocks/**\u0026#39;, \u0026#39;!**/@types/**\u0026#39;, \u0026#39;!**/**/index.ts\u0026#39;, \u0026#39;!**/**.d.ts\u0026#39;, \u0026#39;!src/client/index.tsx\u0026#39;, \u0026#39;!src/client/services/**\u0026#39;, \u0026#39;!scripts/average-work.ts\u0026#39;, \u0026#39;!jest.config.js\u0026#39;, \u0026#39;!setupTests.ts\u0026#39;, ], coverageThreshold: { global: { branches: 85, functions: 95, statements: 85, }, }, };\nSo any time I find a new section of key-value pairs that I do not think belong in the package.json I consult the documentation to see if an option exists to move it out into a separate file. For me, personally, having my project configuration more focused into digestible chunks is worth the minor expense of a few extra files in my project root.\na fairly average project root ","date":"7 October 2022","externalUrl":null,"permalink":"/posts/psa-clean-up-package-json/","section":"Posts","summary":"\u003cp\u003eI have a minor peeve, maybe it\u0026rsquo;s just me, but I really dislike random chunks of configuration cluttering up my \u003cstrong\u003epackage.json\u003c/strong\u003e\nfile. Project generators offered by the likes of \u003ca href=\"https://nestjs.com/\"title=\"progressive Node.js framework for server-side applications written in a familiar Angular-like syntax\" target=\"_blank\"\u003eNest\u003c/a\u003e and \u003ca href=\"https://create-react-app.dev/\"title=\"Set up a modern web app by running one command\" target=\"_blank\"\u003eCreate React App\u003c/a\u003e still leverage the classic pattern\nof embedding third party configuration values in the \u003cstrong\u003epackage.json\u003c/strong\u003e, which makes it feel cluttered to me. Really I am\njust looking to see the dependencies, development dependencies, NPM scripts, and basic project metadata in that file.\u003c/p\u003e","title":"PSA: Cleaning Up package.json","type":"posts"},{"content":" Experience # Company Link Role Dates Location Kiewit Corporation Lead Software Engineer 12/2022 - Present La Vista, NE\nUSA Helix by Q2 Staff Software Engineer 06/2021 - 11/2022 Austin, TX\n(remote)\nUSA Kiewit Corporation Sr. Software Engineer 05/2019 - 06/2021 Omaha, NE\nUSA Orion Software Engineer /API Developer 11/2017 - 05/2019 Omaha, NE\nUSA Medefis, Inc. Sr. Programmer 06/2016 - 11/2017 Omaha, NE\nUSA CSG International Sr. User Interface Development Engineer 09/2015 - 06/2016 Omaha, NE\nUSA idea5, Inc. Sr. Full-Stack Developer 06/2013 - 09/2015 Omaha, NE\nUSA Lineage Logistics Sr. Programmer Analyst 05/2012 - 06/2013 Omaha, NE\nUSA Streck Sr. Programmer/Analyst 07/2011 - 05/2012 La Vista, NE\nUSA iNet Solutions Group, Inc. Sr. Developer 08/2007 - 07/2011 Omaha, NE\nUSA Sitel Group Web Developer\n2006 - 2007 05/1999 - 08/2007 Omaha, NE\nUSA Programmer III2002 - 2006 Programmer II\n1999 - 2002 Special Interest # Company Link Role Dates Location Lazarus Software Technology Artisan 05/2014 - Present RemoteOmaha, NEUSA ","date":"5 October 2022","externalUrl":null,"permalink":"/history/","section":"Code-Chimp","summary":"\u003ch2 class=\"relative group\"\u003eExperience \n    \u003cdiv id=\"experience\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#experience\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003ctable style=\"display:table;\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eCompany\u003c/th\u003e\n      \u003cth\u003eLink\u003c/th\u003e\n      \u003cth\u003eRole\u003c/th\u003e\n      \u003cth\u003eDates\u003c/th\u003e\n      \u003cth\u003eLocation\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg class=\"customLogo medium-zoom-image\" alt=\"Kiewit Corporation\" src=\"kiewit_logo.png\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://www.kiewit.com\"\u003eKiewit Corporation\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eLead Software Engineer\u003c/td\u003e\n      \u003ctd\u003e12/2022 - Present\u003c/td\u003e\n      \u003ctd\u003eLa Vista, NE\u003cbr /\u003eUSA\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg class=\"customLogo medium-zoom-image\" alt=\"Q2 Helix\" src=\"helix2_logo.png\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://helix.q2.com\"\u003eHelix by Q2\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eStaff Software Engineer\u003c/td\u003e\n      \u003ctd\u003e06/2021 - 11/2022\u003c/td\u003e\n      \u003ctd\u003eAustin, TX\u003cbr /\u003e(remote)\u003cbr /\u003eUSA\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg class=\"customLogo medium-zoom-image\" alt=\"Kiewit Corporation\" src=\"kiewit_logo.png\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://www.kiewit.com\"\u003eKiewit Corporation\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eSr. Software Engineer\u003c/td\u003e\n      \u003ctd\u003e05/2019 - 06/2021\u003c/td\u003e\n      \u003ctd\u003eOmaha, NE\u003cbr /\u003eUSA\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg class=\"customLogo medium-zoom-image\" alt=\"Orion\" src=\"orion_logo.png\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://orion.com/\"\u003eOrion\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eSoftware Engineer /\u003cbr/\u003eAPI Developer \u003c/td\u003e\n      \u003ctd\u003e11/2017 - 05/2019\u003c/td\u003e\n      \u003ctd\u003eOmaha, NE\u003cbr /\u003eUSA\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg class=\"customLogo medium-zoom-image\" alt=\"Medefis, Inc.\" src=\"medefis_logo.png\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://www.medefis.com/\"\u003eMedefis, Inc.\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eSr. Programmer \u003c/td\u003e\n      \u003ctd\u003e06/2016 - 11/2017\u003c/td\u003e\n      \u003ctd\u003eOmaha, NE\u003cbr /\u003eUSA\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg class=\"customLogo medium-zoom-image\" alt=\"CSG International\" src=\"csgi_logo.jpg\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://www.csgi.com/\"\u003eCSG International\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eSr. User Interface Development Engineer\u003c/td\u003e\n      \u003ctd\u003e09/2015 - 06/2016\u003c/td\u003e\n      \u003ctd\u003eOmaha, NE\u003cbr /\u003eUSA\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg class=\"customLogo medium-zoom-image\" alt=\"idea5, Inc.\" src=\"idea5_logo.jpg\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://www.idea5inc.com/\"\u003eidea5, Inc.\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eSr. Full-Stack Developer\u003c/td\u003e\n      \u003ctd\u003e06/2013 - 09/2015\u003c/td\u003e\n      \u003ctd\u003eOmaha, NE\u003cbr /\u003eUSA\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg class=\"customLogo medium-zoom-image\" alt=\"Lineage Logistics\" src=\"lineage2_logo.png\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://www.lineagelogistics.com/\"\u003eLineage Logistics\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eSr. Programmer Analyst\u003c/td\u003e\n      \u003ctd\u003e05/2012 - 06/2013\u003c/td\u003e\n      \u003ctd\u003eOmaha, NE\u003cbr /\u003eUSA\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg class=\"customLogo medium-zoom-image\" alt=\"Streck\" src=\"streck_logo.png\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://www.streck.com/\"\u003eStreck\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eSr. Programmer/Analyst\u003c/td\u003e\n      \u003ctd\u003e07/2011 - 05/2012\u003c/td\u003e\n      \u003ctd\u003eLa Vista, NE\u003cbr /\u003eUSA\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg class=\"customLogo medium-zoom-image\" alt=\"iNet Solutions Group, Inc.\" src=\"inetsgi_logo.webp\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://inetsgi.com/\"\u003eiNet Solutions Group, Inc.\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eSr. Developer\u003c/td\u003e\n      \u003ctd\u003e08/2007 - 07/2011\u003c/td\u003e\n      \u003ctd\u003eOmaha, NE\u003cbr /\u003eUSA\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd rowspan=\"3\"\u003e\u003cimg class=\"customLogo medium-zoom-image\" alt=\"Sitel Group\" src=\"sitel_logo.png\" /\u003e\u003c/td\u003e\n      \u003ctd rowspan=\"3\"\u003e\u003ca href=\"https://www.sitel.com/\"\u003eSitel Group\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eWeb Developer\u003cbr /\u003e2006 - 2007\u003c/td\u003e\n      \u003ctd rowspan=\"3\"\u003e05/1999 - 08/2007\u003c/td\u003e\n      \u003ctd rowspan=\"3\"\u003eOmaha, NE\u003cbr /\u003eUSA\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"padding: 8px\"\u003eProgrammer III\u003cbr/\u003e2002 - 2006\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"padding: 8px\"\u003eProgrammer II\u003cbr /\u003e1999 - 2002\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eSpecial Interest \n    \u003cdiv id=\"special-interest\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#special-interest\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eCompany\u003c/th\u003e\n          \u003cth\u003eLink\u003c/th\u003e\n          \u003cth\u003eRole\u003c/th\u003e\n          \u003cth\u003eDates\u003c/th\u003e\n          \u003cth\u003eLocation\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cimg class=\"customLogo medium-zoom-image\" alt=\"Lazarus Software\" src=\"lazarus_logo.png\" /\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.lazarussoftware.com/\" target=\"_blank\"\u003eLazarus Software\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003eTechnology Artisan\u003c/td\u003e\n          \u003ctd\u003e05/2014 - Present\u003c/td\u003e\n          \u003ctd\u003eRemote\u003cbr/\u003eOmaha, NE\u003cbr/\u003eUSA\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"History","type":"page"},{"content":" What I do # I have been shipping code for well over two decades now, and I still really love my work. I am a huge fan of the React framework and have decades worth of experience with the .NET ecosystem which is why I tend to gravitate towards front-end heavy full stack roles. I have entirely embraced TypeScript for anything I would normally have written in JavaScript - such as a React front-end, NodeJS middle tier code, or even personal experiments with React Native. Lately I have been focusing on automating my code quality through the use of good static analysis tools like ESLint and Prettier paired with an extensive test suite - usually leveraging Kent C. Dodd\u0026rsquo;s excellent Testing Library to enhance the Jest testing framework (example).\nHow I got here # the books in the middle opened a new world for me\nI was bitten by the programming bug after seeing the Disney movie Tron as a young teenager - afterwards ceaselessly bugging my parents until they gave in and purchased a top-of-the line Apple //c for me. That computer introduced me to the world of Apple Basic and 6502 Assembler and still sits in a corner of my office (pic).\nAfter years of developing in mainframe languages and Visual Basic 6 I finally slid into web development with the first release of ASP.NET. Fast forward a bit and I land at a startup as a \u0026ldquo;C# Cloud Developer\u0026rdquo;, but since I proved to be really handy with jQuery, HTML5 and this new-fangled thing called Sass I was tasked with being the \u0026ldquo;front-end guy\u0026rdquo;. I very quickly learned that I loved the bleeding edge of 2013 front-end development - evaluating frameworks like early AngularJS, Backbone, and Knockout tooling like the Grunt and Gulp task runners and an early bundler called Almond. The rest, as they say, is history as the frameworks, tooling, and discipline of front-end development have only grown more refined since then.\nWhere I am # I live in Omaha, NE with my wife, daughter, two random rescue dogs, and four mildly psychotic cockatiels. Even though I am not wild about winters here in the Midwest, I cannot seem to talk my wife into moving anywhere else so I am stuck here for the time being. In my spare time I like experimenting with different programming languages and frameworks. When my family manages to get me out of the house I enjoy walking our local botanical gardens, world class zoo, or one of our many - sometimes eclectic - museums.\nMy Apple //c # Jurassic PC in her native environment ","date":"5 October 2022","externalUrl":null,"permalink":"/about/","section":"Code-Chimp","summary":"\u003cfigure\u003e\u003cimg src=\"/about/my_desk.jpg\"\n    alt=\"my office\"\u003e\n\u003c/figure\u003e\n\n\n\n\n\u003ch2 class=\"relative group\"\u003eWhat I do \n    \u003cdiv id=\"what-i-do\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#what-i-do\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eI have been shipping code for well over two decades now, and I still really love my work.  I am a huge fan of the\n\u003ca href=\"https://reactjs.org/\"title=\"A component based JavaScript library for building user interfaces\" target=\"_blank\"\u003eReact\u003c/a\u003e framework and have decades worth of experience with the \u003ca href=\"https://dotnet.microsoft.com/en-us/\"title=\"Microsoft\u0026#39;s cross-platform development framework\" target=\"_blank\"\u003e.NET ecosystem\u003c/a\u003e which is why I tend to\ngravitate towards front-end heavy full stack roles. I have entirely embraced \u003ca href=\"https://www.typescriptlang.org/\"title=\"A superset of modern JavaScript with type safety as a focus\" target=\"_blank\"\u003eTypeScript\u003c/a\u003e for anything I would\nnormally have written in JavaScript - such as a React front-end, \u003ca href=\"https://nodejs.org/en/\"title=\"Cross-platform JavaScript runtime environment\" target=\"_blank\"\u003eNodeJS\u003c/a\u003e middle tier code, or even\n\u003ca href=\"https://github.com/code-chimp/MealsToGoSimplified\"title=\"Workshopping TypeScript for React-Native development\" target=\"_blank\"\u003epersonal experiments\u003c/a\u003e with \u003ca href=\"https://reactnative.dev/\"title=\"Create native apps for Android and iOS using React\" target=\"_blank\"\u003eReact Native\u003c/a\u003e. Lately I have been focusing on automating my code quality through\nthe use of good static analysis tools like \u003ca href=\"https://eslint.org/\"title=\"A pluggable linting utility for early identification of problems in your code\" target=\"_blank\"\u003eESLint\u003c/a\u003e and \u003ca href=\"https://prettier.io/\"title=\"An opinionated code formatter\" target=\"_blank\"\u003ePrettier\u003c/a\u003e paired with an extensive test suite -\nusually leveraging \u003ca href=\"https://kentcdodds.com/\"title=\"Educator, blogger, extreme sports enthusiast\" target=\"_blank\"\u003eKent C. Dodd\u0026rsquo;s\u003c/a\u003e excellent \u003ca href=\"https://testing-library.com/\"title=\"Utilities to aid in UI testing\" target=\"_blank\"\u003eTesting Library\u003c/a\u003e to enhance the \u003ca href=\"https://jestjs.io/\"title=\"JavaScript test framework\" target=\"_blank\"\u003eJest\u003c/a\u003e testing framework\n\u003ca href=\"https://github.com/code-chimp/cryptochain\"title=\"Personal exploration of blockchain concepts prototyped in NodeJS \u0026#43; React\" target=\"_blank\"\u003e(example)\u003c/a\u003e.\u003c/p\u003e","title":"About","type":"page"},{"content":"","date":"5 October 2022","externalUrl":null,"permalink":"/tags/greetings/","section":"Tags","summary":"","title":"Greetings","type":"tags"},{"content":"Just wanted to say \u0026ldquo;Hi\u0026rdquo; and \u0026ldquo;Thank you\u0026rdquo; for stopping by.\nIf you are curious I am planning this site as more of place for me to keep notes on new things I learn or figure out in a more searchable format than a bunch of random projects on one of my dev boxes. Thanks to the ADD and the excellent marketing departments of places like Frontend Masters, Manning, and Udemy I always have a backlog of shiny new things that I am teaching myself and it has started to become a challenge when attempting to recall \u0026ldquo;what project did I put that cool piece of code in that did that thing I want to do now?\u0026rdquo;.\nWhere is the comments section? I will likely never add a comments section because frankly they are a real pain to police for spam, unproductive flame wars, and really inappropriate content among other things. If you have a question feel free to reach out to me directly via the contact information I have provided here.\nIf you find anything of use in my random stuff - glad that I could be of service.\nHave a great day!\n","date":"5 October 2022","externalUrl":null,"permalink":"/posts/hi/","section":"Posts","summary":"\u003cp\u003eJust wanted to say \u003cstrong\u003e\u0026ldquo;Hi\u0026rdquo;\u003c/strong\u003e and \u003cstrong\u003e\u0026ldquo;Thank you\u0026rdquo;\u003c/strong\u003e for stopping by.\u003c/p\u003e\n\u003cp\u003eIf you are curious I am planning this site as more of place for me to keep notes on new things I learn or figure out in\na more searchable format than a bunch of random projects on one of my dev boxes. Thanks to the\n\u003cabbr title=\"Attention deficit disorder\"\u003eADD\u003c/abbr\u003e and the excellent marketing departments of places like\n\u003ca href=\"https://frontendmasters.com/\" target=\"_blank\"\u003eFrontend Masters\u003c/a\u003e, \u003ca href=\"https://www.manning.com/\" target=\"_blank\"\u003eManning\u003c/a\u003e, and \u003ca href=\"https://www.udemy.com/\" target=\"_blank\"\u003eUdemy\u003c/a\u003e\nI always have a backlog of shiny new things that I am teaching myself and it has started to become a challenge when\nattempting to recall \u0026ldquo;what project did I put that cool piece of code in that did that thing I want to do now?\u0026rdquo;.\u003c/p\u003e","title":"Hi","type":"posts"},{"content":"","date":"5 October 2022","externalUrl":null,"permalink":"/categories/irrelevant-drivel/","section":"Categories","summary":"","title":"Irrelevant Drivel","type":"categories"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]